{"author": "mth", "index": 0, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nFILE_NAME_BASE = 'D-small-attempt0'\nNUM_PROCESSES = 0\nMEM_LIMIT_GB = 1.5 # per worker process\nRECURSION_LIMIT = 1000\n \nfrom itertools import chain\n \ndef parse(inp):\n\tnumBlocks, = (int(x) for x in inp.readline().split())\n\tnaomiBlocks = tuple(sorted(float(x) for x in inp.readline().split()))\n\tkenBlocks = tuple(sorted(float(x) for x in inp.readline().split()))\n\tassert len(naomiBlocks) == numBlocks\n\tassert len(kenBlocks) == numBlocks\n\treturn naomiBlocks, kenBlocks\n \ndef solve(naomiBlocks, kenBlocks):\n\tnumBlocks = len(naomiBlocks)\n \n\t# greedy strategy for honest play:\n\t# play the block that is heavier by the smallest margin (if you have one)\n\t# ('honest' meaning sticking to the rules; 'fair' is something else)\n\tkenPointsHonest = 0\n\tnaomiLowerBlocks = 0\n\tfor _, owner in sorted(chain(\n\t\t\t((b, 'n') for b in naomiBlocks),\n\t\t\t((b, 'k') for b in kenBlocks)\n\t\t\t)):\n\t\tif owner == 'n':\n\t\t\tnaomiLowerBlocks += 1\n\t\telif naomiLowerBlocks != 0:\n\t\t\tnaomiLowerBlocks -= 1\n\t\t\tkenPointsHonest += 1\n\tnaomiPointsHonest = numBlocks - kenPointsHonest\n \n\t# strategy for deceitful play:\n\t# moves:\n\t# + lie and win:\n\t#   when Ken can't match the told number, he'll play his lightest block\n\t#   so you can lie and win if you play a block heavier than his lightest\n\t# + lie and lose:\n\t#   name a weight just below Ken's heaviest block, forcing him to play that\n\t# - truth and win:\n\t#   when you play a block that is actually heavier than anything Ken has\n\t#   is just a special case of lie and win\n\t# - truth and lose:\n\t#   never optimal\n\t# optimal order of play:\n\t#   always play your lightest block: if it can't win now, it can never win\n\t#   in the future either, nor can it be more effective in the future than\n\t#   pulling his current heaviest block\n\tnaomiLoIdx = 0\n\tnaomiHiIdx = numBlocks - 1\n\tkenLoIdx = 0\n\tkenHiIdx = numBlocks - 1\n\tnaomiPointsDeceit = 0\n\twhile naomiLoIdx <= naomiHiIdx:\n\t\tassert naomiHiIdx - naomiLoIdx == kenHiIdx - kenLoIdx\n\t\tnaomiLo = naomiBlocks[naomiLoIdx]\n\t\t#naomiHi = naomiBlocks[naomiHiIdx]\n\t\tkenLo = kenBlocks[kenLoIdx]\n\t\t#kenHi = kenBlocks[kenHiIdx]\n\t\tif naomiLo > kenLo:\n\t\t\tnaomiPointsDeceit += 1\n\t\t\tkenLoIdx += 1\n\t\telse:\n\t\t\tkenHiIdx -= 1\n\t\tnaomiLoIdx += 1\n \n\t#print(naomiBlocks)\n\t#print(kenBlocks)\n\t#print(return '%d %d' % (naomiPointsDeceit, naomiPointsHonest))\n \ndef main():\n\timport sys\n\tsys.setrecursionlimit(RECURSION_LIMIT)\n \n\timport resource\n\tsoft, hard = resource.getrlimit(resource.RLIMIT_AS)\n\tresource.setrlimit(resource.RLIMIT_AS, (MEM_LIMIT_GB * 1024 ** 3, hard))\n \n\tinp = open(FILE_NAME_BASE + '.in', 'r')\n\tnumCases = int(inp.readline())\n\tif NUM_PROCESSES == 0:\n\t\tresults = [\n\t\t\tsolve(*parse(inp))\n\t\t\tfor _ in range(numCases)\n\t\t\t]\n\telse:\n\t\tfrom multiprocessing import Pool\n\t\tpool = Pool(NUM_PROCESSES)\n\t\tresults = [\n\t\t\tpool.apply_async(solve, parse(inp))\n\t\t\tfor _ in range(numCases)\n\t\t\t]\n\tinp.close()\n\tout = open(FILE_NAME_BASE + '.out', 'w')\n\tfor case, result in enumerate(results):\n\t\tvalue = result if NUM_PROCESSES == 0 else result.get()\n\t\tout.write('Case #%d: %s\\n' % (case + 1, value))\n\t\tout.flush()\n\tout.close()\n \nif __name__ == '__main__':\n\tmain()\n"}
{"author": "binnie", "index": 1, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nf = open(sys.argv[1])\nT = int(f.readline())\nfor test in range(T):\n    N = int(f.readline())\n    naomi_blocks = map(float, f.readline().strip().split(\" \"))\n    ken_blocks = map(float, f.readline().strip().split(\" \"))\n    naomi_blocks.sort()\n    ken_blocks.sort()\n    naomi_clone = list(naomi_blocks)\n    ken_clone = list(ken_blocks)\n \n    naomi_standard_score = 0\n    while naomi_blocks != []:\n        naomi_new_val = naomi_blocks.pop()\n        if naomi_new_val > ken_blocks[-1]:\n            naomi_standard_score += 1\n            ken_blocks.pop(0)\n        else:\n            ii = 0\n            while ken_blocks[ii] < naomi_new_val:\n                ii += 1\n            ken_blocks.pop(ii)\n \n    assert(ken_blocks == [])\n \n    naomi_blocks = naomi_clone\n    ken_blocks = ken_clone\n    naomi_blocks.sort(reverse=True)\n    ken_blocks.sort(reverse=True)\n    deceiving_strat_score = 0\n    while naomi_blocks != []:\n        naomi_new_val = naomi_blocks.pop()\n        if naomi_new_val > ken_blocks[-1]:\n            ken_blocks.pop()\n            deceiving_strat_score += 1\n \n    print(\"Case #%d: \" % (test + 1), deceiving_strat_score, naomi_standard_score)\n \n \n \n"}
{"author": "imakaramegane", "index": 2, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: utf-8\nimport sys\nimport os.path\nimport itertools\nfrom itertools import groupby\nimport math\n \ndef debug(v):\n    pass#print(v)\n \ndef read(f):\n    t = tuple(int(v) for v in f.readline().split())\n    debug(t)\n    return t\n \ndef readf(f):\n    t = tuple(float(v) for v in f.readline().split())\n    debug(t)\n    return t\n \ndef answer(f, X, Y, Z):\n    out = \"Case #{}: {} {}\".format(X, Y, Z)\n    f.write(out)\n    f.write(\"\\n\")\n    print(out)\n \n \n \ndef main(inf, outf):\n    T, = read(inf)\n    for casenmbr in range(1, T + 1):\n        N = read(inf)\n        naomi_blks = sorted(readf(inf))\n        ken_blks = sorted(readf(inf))\n        # print(\"------\")\n        # print(naomi_blks)\n        # print(ken_blks)\n \n        y = len([None for naomi in naomi_blks if ken_blks[0] < naomi])\n \n        z = 0\n        for naomi in naomi_blks:\n            for i in range(len(ken_blks)):\n                if naomi < ken_blks[i]:\n                    del ken_blks[i]\n                    break\n            else:\n                z += 1\n                del ken_blks[0]\n \n        answer(outf, casenmbr, y, z)\n \n \nif __name__==\"__main__\":\n    infname = sys.argv[1]\n    outfname = os.path.splitext(infname)[0] + \".out\"\n    with open(infname, \"r\") as inf:\n        with open(outfname, \"w\") as outf:\n            main(inf, outf)\n"}
{"author": "serialk", "index": 3, "filename": "2014_2974486_5644738749267968.py", "code": "import bisect\n \nT = int(input())\n \nfor t in range(T):\n    N = int(input())\n    naomi = sorted(list(map(float, input().split())))\n    ken = sorted(list(map(float, input().split())))\n    naomi_dw = naomi[:]\n    ken_dw = ken[:]\n    war = 0\n    dwar = 0\n    for pn in naomi:\n        pk = bisect.bisect_left(ken, pn)\n        if pk == len(ken):\n            war += 1\n            ken.pop(0)\n        else:\n            ken.pop(pk)\n    for pn in naomi_dw:\n        if pn > ken_dw[0]:\n            dwar += 1\n            ken_dw.pop(0)\n        else:\n            ken_dw.pop()\n    print('Case #{}: {} {}'.format(t + 1, dwar, war))\n"}
{"author": "j4b", "index": 4, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\nimport functools\nimport operator\nimport math\nfrom itertools import chain, combinations\nfrom heapq import heappop, heappush, _siftup\n \ndef solveWar(n_weights, k_weights):\n    nweights = sorted(n_weights)\n    kweights = sorted(k_weights)\n    score = 0\n     \n    # while nweights:\n    #     w = nweights.pop(0)\n    #     res = [kweight for kweight in kweights if kweight > w]\n    #     if res:\n    #         kweights.remove(min(res))\n    #     else:\n    #         score += len(nweights) + 1\n    #         break\n \n    for w in nweights:\n        while kweights and kweights[0] < w:\n            kweights.pop(0)\n            score += 1\n \n        if not kweights:\n            break\n        else:\n            kweights.pop(0)\n             \n    return score\n \ndef solveDWar(n_weights, k_weights):\n    nweights = sorted(n_weights)\n    kweights = sorted(k_weights)\n    score = 0\n \n    for w in nweights:\n        if w > kweights[0]:\n            score += 1\n            kweights.pop(0)\n        else:\n            kweights.pop(-1)\n     \n    return score\n \ndef solve(nweights, kweights):\n    return (\"%s %s\" % (solveDWar(nweights, kweights), solveWar(nweights, kweights)))\n \ndef main():\n    N = int(sys.stdin.readline()) # number of testcases\n    for i in range(N):\n        sys.stdin.readline()\n        nweights = [float(x) for x in sys.stdin.readline().rstrip().split()]\n        kweights = [float(x) for x in sys.stdin.readline().rstrip().split()]\n \n        result = solve(nweights, kweights)\n        print((\"Case #%s: %s\" % (i+1, result)))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "argaen", "index": 5, "filename": "2014_2974486_5644738749267968.py", "code": "t = int(raw_input())\n \nfor case in range(t):\n\tn = int(raw_input())\n\tnaomi = [float(i) for i in raw_input().split()]\n\tken = [float(i) for i in raw_input().split()]\n \n\tnaomi.sort()\n\tken.sort()\n\ty = 0\n\tz = 0\n \n\t#print(naomi)\n\t#print(ken)\n \n\tna = naomi[:]\n\tke = ken[:]\n\twhile len(na) > 0:\n\t\tnc = na.pop(0)\n\t\tkc = -1\n\t\tfor i in range(len(ke)):\n\t\t\tif ke[i] > nc:\n\t\t\t\tkc = ke.pop(i)\n\t\t\t\tbreak\n\t\tif kc == -1:\n\t\t\tkc = ke.pop(0)\n\t\tif nc > kc:\n\t\t\tz += 1\n \n \n\tna = naomi[:]\n\tke = ken[:]\n\twhile len(ke) > 0:\n\t\tkc = ke.pop(0)\n\t\tnc = -1\n\t\tfor i in range(len(na)):\n\t\t\tif na[i] > kc:\n\t\t\t\tnc = na.pop(i)\n\t\t\t\tbreak\n\t\tif nc == -1:\n\t\t\tnc = na.pop(0)\n\t\tif nc > kc:\n\t\t\ty += 1\n\t\t#print(nc, kc)\n \n\tprint('Case #'+str(case+1)+':', y, z)\n\t#print('')\n"}
{"author": "graygrass", "index": 6, "filename": "2014_2974486_5644738749267968.py", "code": "import os\nimport bisect\n \nclass Solver(object):\n    def __init__(self):\n        pass\n     \n    def solve(self, inputs):\n        nn = [float(x) for x in inputs[1].split()]\n        nn.sort()\n        kk = [float(x) for x in inputs[2].split()]\n        kk.sort()\n        dw = self.dwar(nn[:], kk[:])\n        w = self.war(nn[:], kk[:])\n        return '%d %d'%(dw, w)\n        pass\n     \n    def dwar(self, nn, kk):\n        turn = len(nn)\n        cnt = 0\n        for i in range(turn):\n            i = i\n            if nn[-1] < kk[-1]:\n                nn.pop(0)\n                kk.pop(-1)\n            elif nn[0] < kk[0]:\n                nn.pop(0)\n                kk.pop(-1)\n            else:\n                cnt += 1\n                nn.pop(0)\n                kk.pop(0)\n        return cnt\n     \n    def war(self, nn, kk):\n        turn = len(nn)\n        cnt = 0\n        for i in range(turn):\n            i = i\n            j = bisect.bisect_left(kk, nn[0])\n            if j == len(kk):\n                cnt += 1\n                kk.pop(0)\n            else:\n                kk.pop(j)\n            nn.pop(0)\n        return cnt\n     \n    def feed(self, inputs):\n        lines = [x.strip() for x in inputs]\n        outputs = []\n        test_case_n = int(lines[0])\n        cur = 1\n        for i in range(test_case_n):\n            i = i\n            case_line_cnt = 3\n            case_inputs = lines[cur:cur+case_line_cnt]\n            cur += case_line_cnt\n            outputs.append(self.solve(case_inputs))\n        return outputs\n \nif __name__ == '__main__':\n    iname = 'D-small-attempt0.in'\n#     iname = 'foo'\n    sample_in = '''\n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n    '''\n    sample_out = '''\nCase #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n    '''\n    if os.path.exists(iname):\n        with open(iname) as f:\n            inputs = f.readlines()\n    else:\n        inputs = [x.strip() for x in sample_in.split('\\n') if x.strip()]\n    solver = Solver()\n    outputs = solver.feed(inputs)\n    fail_flag = False\n    if os.path.exists(iname):\n        with open(iname+'.out', 'w') as f:\n            for i, v in enumerate(outputs):\n                print >> f, 'Case #%d: %s'%(i+1, str(v))\n    else:\n        ans = set([x.strip() for x in sample_out.split('\\n') if x.strip()])\n        for i, v in enumerate(outputs):\n            t = 'Case #%d: %s'%(i+1, str(v))\n            if t not in ans:\n                print ('!!! Wrong:', t)\n                fail_flag = True\n    print ('====================================================')\n    for i, v in enumerate(outputs):\n        print ('Case #%d: %s'%(i+1, str(v)))\n    print ('====================================================')\n    print ('done' if not fail_flag else 'fail')\n    pass"}
{"author": "alexamici", "index": 7, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"Usage:\n    pypy X.py < X-size.in > X-size.out\nor sometimes\n    python X.py < X-size.in > X-size.out\n\"\"\"\n \ndef setup(infile):\n    #C = {}\n    return locals()\n \ndef reader(testcase, infile, C=None, **ignore):\n    N = int(infile.next())\n    P = map(float, infile.next().split())\n    I = map(float, infile.next().split())\n    #T = infile.next().split()\n    #S = [infile.next().strip() for i in range(N)]\n    return locals()\n \ndef solver(testcase, N=None, P=None, I=None, T=None, S=None, C=None, **ignore):\n    #import collections as co\n    #import functools32 as ft\n    #import itertools as it\n    #import operator as op\n    #import math as ma\n    #import re\n    #import numpypy as np\n    #import scipy as sp\n    #import networkx as nx\n \n    N = sorted(P)\n    K = sorted(I)\n \n    W = 0\n    ik = 0\n    for n in N:\n        while ik < len(K) and K[ik] < n:\n            ik += 1\n            W += 1\n        ik += 1\n \n    D = 0\n    i = 0\n    for k in K:\n        while i < len(N) and N[i] < k:\n            i += 1\n        i += 1\n        if i <= len(N):\n            D += 1\n \n    return 'Case #%s: %s %s\\n' % (testcase, D, W)\n \nif __name__ == '__main__':\n    import sys\n    T = int(sys.stdin.next())\n    common = setup(sys.stdin)\n    for t in xrange(1, T+1):\n        sys.stdout.write(solver(**reader(t, **common)))\n"}
{"author": "ralfkistner", "index": 8, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python3\n# -*- coding: utf-8 -*-\n# Uses https://github.com/rkistner/contest-algorithms\n \n# Naomi and Ken sometimes play games together. Before they play, each of them gets N identical-looking blocks of wood with masses between 0.0kg and 1.0kg (exclusive). All of the blocks have different weights. There are lots of games they could play with those blocks, but they usually play something they call War. Here is how War works:\n \n# Each player weighs each of his or her own blocks, so each player knows the weights of all of his or her own blocks, but not the weights of the other player's blocks.\n# They repeat the following process N times:\n# Naomi chooses one of her own blocks, with mass ChosenNaomi.\n# Naomi tells Ken the mass of the block she chose.\n# Ken chooses one of his own blocks, with mass ChosenKen.\n# They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n# Both blocks are destroyed in a fire.\n# Naomi has realized three things about War. First, she has realized that she loses a lot. Second, she has realized that there is a unique strategy that Ken can follow to maximize his points without assuming anything about Naomi's strategy, and that Ken always uses it. Third, she has realized that she hates to lose. Naomi has decided that instead of playing War, she will play a game she calls Deceitful War. The great thing about Deceitful War is that Ken will think they're playing War!\n \n# Here is how Deceitful War works, with differences between Deceitful War and War in bold:\n \n# Each player weighs each of his or her own blocks. Naomi also weighs Ken's blocks while he isn't looking, so Naomi knows the weights of all blocks and Ken only knows the weights of his own blocks.\n# They repeat the following process N times:\n# Naomi chooses one of her own blocks, with mass ChosenNaomi.\n# Naomi tells Ken a number, ToldNaomi, between 0.0kg and 1.0kg exclusive. Ken, who thinks they're playing War, thinks the number Naomi just told him is ChosenNaomi.\n# Ken chooses one of his own blocks, with mass ChosenKen.\n# They each put their block on one side of a balance scale, and the person whose block is heavier gets one point.\n# Both blocks are destroyed in a fire.\n# Naomi doesn't want Ken to know that she isn't playing War; so when she is choosing which block to play, and what mass to tell Ken, she must make sure that the balance scale won't reveal that ChosenNaomi ≠ ToldNaomi. In other words, she must make decisions so that:\n \n# ChosenNaomi > ChosenKen if, and only if, ToldNaomi > ChosenKen, and\n# ToldNaomi is not equal to the mass of any of Ken's blocks, because he knows that isn't possible.\n# It might seem like Naomi won't win any extra points by being deceitful, because Ken might discover that she wasn't playing War; but Naomi knows Ken thinks both players are playing War, and she knows what he knows, and she knows Ken will always follow his unique optimal strategy for War, so she can always predict what he will play.\n \n# You'll be given the masses of the blocks Naomi and Ken started with. Naomi will play Deceitful War optimally to gain the maximum number of points. Ken will play War optimally to gain the maximum number of points assuming that both players are playing War. What will Naomi's score be? What would it have been if she had played War optimally instead?\n \n# Examples\n \n# If each player has a single block left, where Naomi has 0.5kg and Ken has 0.6kg, then Ken is guaranteed to score the point. Naomi can't say her number is ≥ 0.6kg, or Ken will know she isn't playing War when the balance scale shows his block was heavier.\n \n# If each player has two blocks left, where Naomi has [0.7kg, 0.2kg] and Ken has [0.8kg, 0.3kg], then Naomi could choose her 0.2kg block, and deceive Ken by telling him that she chose a block that was 0.6kg. Ken assumes Naomi is telling the truth (as in how the War game works) and will play his 0.8kg block to score a point. Ken was just deceived, but he will never realize it because the balance scale shows that his 0.8kg block is, like he expected, heavier than the block Naomi played. Now Naomi can play her 0.7kg block, tell Ken it is 0.7kg, and score a point. If Naomi had played War instead of Deceitful War, then Ken would have scored two points and Naomi would have scored zero.\n \n# Input\n \n# The first line of the input gives the number of test cases, T. T test cases follow. Each test case starts with a line containing a single integer N, the number of blocks each player has. Next follows a line containing N space-separated real numbers: the masses of Naomi's blocks, in kg. Finally there will be a line containing N space-separated real numbers: the masses of Ken's blocks, in kg.\n \n# Each of the masses given to Ken and Naomi will be represented as a 0, followed by a decimal point, followed by 1-5 digits. Even though all the numbers in the input have 1-5 digits after the decimal point, Ken and Naomi don't know that; so Naomi can still tell Ken that she played a block with mass 0.5000001kg, and Ken has no reason not to believe her.\n \n# Output\n \n# For each test case, output one line containing \"Case #x: y z\", where x is the test case number (starting from 1), y is the number of points Naomi will score if she plays Deceitful War optimally, and z is the number of points Naomi will score if she plays War optimally.\n \n# Limits\n \n# 1 ≤ T ≤ 50.\n# All the masses given to Ken and Naomi are distinct, and between 0.0 and 1.0 exclusive.\n# Small dataset\n \n# 1 ≤ N ≤ 10.\n# Large dataset\n \n# 1 ≤ N ≤ 1000.\n \n \nimport sys\n \n \ndef debug(*args):\n    print(*args, file=sys.stderr)\n \nfin = sys.stdin\nT = int(fin.readline())\nfor case in range(1, T + 1):\n    N = int(fin.readline())\n    numbers1 = list(map(float, fin.readline().split()))\n    numbers2 = list(map(float, fin.readline().split()))\n \n    numbers1.sort(reverse=True)\n    numbers2.sort()\n \n    # Normal\n    naomi = 0\n    remaining = numbers2[:]\n    for n in numbers1:\n        lost = False\n        for i, r in enumerate(remaining):\n            if r > n:\n                del remaining[i]\n                lost = True\n                break\n        if not lost:\n            naomi += 1\n \n    cheat = 0\n    remaining = numbers2[:]\n    numbers1.sort()\n    # debug(numbers1)\n    # debug(remaining)\n    while numbers1:\n        n = numbers1[0]\n        if n > remaining[0]:\n            cheat += 1\n            del remaining[0]\n            del numbers1[0]\n        else:\n            del remaining[-1]\n            del numbers1[0]\n \n    print(\"Case #%d: %d %d\" % (case, cheat, naomi))\n \n"}
{"author": "cathco", "index": 9, "filename": "2014_2974486_5644738749267968.py", "code": "from copy import deepcopy\nimport time\n \ndef dwar(N, K):\n    N = sorted(N)\n    K = sorted(K)\n    \n    naomi = 0\n    \n    #if naomi can win then she should lose her lowest piece to do so\n    #if kevin can win then he should lose his highest piece\n    while len(N) > 0:\n        # Naomi can win.\n        if N[-1] > K[-1]:\n            # Kevin loses highest piece.\n            k = K.pop()\n            # Naomi loses lowest piece necessary.\n            for i, n in enumerate(N):\n                if N[i] > k:\n                    choosen = i\n                    break\n            del(N[choosen])\n            naomi += 1\n        # Naomi cannot win.\n        else:\n            # Naomi loses lowest piece.\n            N = N[1:]\n            k = K.pop()\n    return naomi\n \ndef war(N, K):\n    N = sorted(N)\n    K = sorted(K)\n    \n    naomi = 0\n    while len(N) > 0:\n        n = N.pop()\n        chosen = None\n        for i, k in enumerate(K):\n            if k > n:\n                chosen = i\n                break\n        if not chosen == None:\n            del(K[chosen])\n        else:\n            naomi += 1\n    return naomi\n \nT = int(raw_input())\nfor t in range(T):\n    _ = raw_input()\n    N = map(float, raw_input().split())\n    K = map(float, raw_input().split())\n   \nprint ('Case #%i: %i %i' % (t+1, dwar(N, K), war(N, K)))\n"}
{"author": "gepa", "index": 10, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \n \ndef dw(a, b):\n    a = sorted(a)\n    b = sorted(b)\n    cnt = 0\n    k = 0\n    for i in a:\n        if b[k] < i:\n            cnt += 1\n            k += 1\n    return cnt\n \n \ndef w(a, b):\n    a = sorted(a, reverse=True)\n    b = sorted(b, reverse=True)\n    cnt = 0\n    k = 0\n    for i in a:\n        if i > b[k]:\n            cnt += 1\n        else:\n            k += 1\n    return cnt\n \n \ndef compute(a, b):\n    x = dw(a, b)\n    y = w(a, b)\n    return \"%s %s\" % (x, y)\n \n \ndef parse():\n    N = int(sys.stdin.readline().strip())\n    a = map(float, sys.stdin.readline().strip().split())\n    b = map(float, sys.stdin.readline().strip().split())\n    return a, b\n \n \nif __name__ == \"__main__\":\n    sys.setrecursionlimit(100000)\n    T = int(sys.stdin.readline().strip())\n    for i in xrange(T):\n        data = parse()\n        result = compute(*data)\n        print(\"Case #%d: %s\" % (i + 1, result))\n"}
{"author": "jgaten", "index": 11, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nimport sys\n \ndef war(N, ns, ks):\n    \"\"\"Return Naomi's score in regular War\n \n    Strategy: Naomi and Ken both play their smallest possible block. When Ken\n    runs out of winning blocks, Naomi's score is the number of remaining blocks.\n \n    Ken's strategy is to select the smallest block which will beat Naomi's\n    choice, or if there is none, then his smallest block.\n    \"\"\"\n    i = 0   # position through naomi's blocks\n    j = 0   # position through ken's blocks\n \n    # Play each of Naomi's blocks:\n    while i < N:\n        # Invariant: i <= j\n        # Find a block for Ken to play\n        while j < N and ks[j] < ns[i]:\n            j += 1\n \n        # If Ken is out of playable blocks, game is over.\n        if j == N:\n            break\n \n        # Move on to the next block for each player\n        i += 1\n        j += 1\n \n    return N - i\n \ndef deceit(N, ns, ks):\n    \"\"\"Return Naomi's score in Deceitful War\n \n    Strategy: Naomi selects the smallest block with size > min(ks), and sets\n    Told_N > max(ks). Ken will choose to play min(ks), and lose the round.\n    If all of Naomi's blocks are smaller than all of Ken's, she cannot win any\n    more rounds, and her score is the number of blocks used (which is also equal\n    to N - the number of remaining blocks).\n \n    This happens to be the same strategy as regular war, with ks and ns swapped,\n    and the final score subtracted from N. (At least, I'm pretty sure it'll work).\n    \"\"\"\n    return N - war(N, ks, ns)\n \n \ndef solve(N, ns, ks):\n    ns.sort()\n    ks.sort()\n    return \"{} {}\".format(deceit(N, ns, ks), war(N, ns, ks))\n \nif __name__ == '__main__':\n    fin = open(sys.argv[1], 'rU') if sys.argv[1:] else sys.stdin\n    fout = open(sys.argv[2], 'w') if sys.argv[2:] else sys.stdout\n    with fin, fout:\n        T = int(fin.readline())\n        for case in xrange(1, T+1):\n            n = int(fin.readline())\n            ns = map(float, fin.readline().split())\n            ks = map(float, fin.readline().split())\n            soln = solve(n, ns, ks)\n            print >> fout, \"Case #{0}: {1}\".format(case, soln)\n \n"}
{"author": "ziyan", "index": 12, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nimport Queue\n \ndef ken(ken_blocks, naomi_block):\n    \"\"\"\n    Since ken do not know Naomi's blocks weights\n    Best strategy will be spent the smallest block to beat Naomi\n    \"\"\"\n \n    for block in ken_blocks:\n        if block > naomi_block:\n            ken_blocks = ken_blocks[:]\n            ken_blocks.remove(block)\n            return True, ken_blocks\n \n    ken_blocks = ken_blocks[1:]\n    return False, ken_blocks\n \ndef naomi(naomi_blocks):\n    naomi_block = naomi_blocks[0]\n    naomi_blocks = naomi_blocks[1:]\n    return naomi_block, naomi_blocks\n \ndef play(naomi_blocks, ken_blocks):\n    naomi_points = 0\n    ken_points = 0\n \n    naomi_blocks.sort()\n    ken_blocks.sort()\n \n    while naomi_blocks and ken_blocks:\n        naomi_block, naomi_blocks = naomi(naomi_blocks)\n        ken_wins, ken_blocks = ken(ken_blocks, naomi_block)\n        if ken_wins:\n            ken_points += 1\n        else:\n            naomi_points += 1\n \n    return naomi_points\n \ndef naomi2(naomi_blocks, ken_blocks):\n    target = ken_blocks[0]\n    for block in naomi_blocks:\n        if block > target:\n            naomi_blocks = naomi_blocks[:]\n            naomi_blocks.remove(block)\n            return ken_blocks[-1] + 0.0000001, naomi_blocks\n    return naomi_blocks[0], naomi_blocks[1:]\n \ndef cheat(naomi_blocks, ken_blocks):\n    naomi_points = 0\n    ken_points = 0\n \n    naomi_blocks.sort()\n    ken_blocks.sort()\n \n    while naomi_blocks and ken_blocks:\n        naomi_block, naomi_blocks = naomi2(naomi_blocks, ken_blocks)\n        ken_wins, ken_blocks = ken(ken_blocks, naomi_block)\n        if ken_wins:\n            ken_points += 1\n        else:\n            naomi_points += 1\n    return naomi_points\n \ndef main():\n    cases = int(sys.stdin.readline())\n \n    for case in range(cases):\n        N = int(sys.stdin.readline())\n        naomi_blocks = map(float, sys.stdin.readline().split())\n        ken_blocks = map(float, sys.stdin.readline().split())\n        assert len(naomi_blocks) is N\n        assert len(ken_blocks) is N\n \n        normal_war = play(naomi_blocks, ken_blocks)\n        cheat_war = cheat(naomi_blocks, ken_blocks)\n        print('Case #%d: %d %d' % (case + 1, cheat_war, normal_war))\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "enterr", "index": 13, "filename": "2014_2974486_5644738749267968.py", "code": "#\n# Google Code Jam 2014\n# Roaund 0: D. Deceitful War\n# submission by EnTerr\n#\n \n'''\nInput\nThe first line of the input gives the number of test cases, T. T test cases follow. \nEach test case starts with a line containing a single integer N, the number of blocks \neach player has. Next follows a line containing N space-separated real numbers: \nthe masses of Naomi's blocks, in kg. Finally there will be a line containing N \nspace-separated real numbers: the masses of Ken's blocks, in kg.\n \nOutput\nFor each test case, output one line containing \"Case #x: y z\", where \nx is the test case number (starting from 1), \ny is the number of points Naomi will score if she plays Deceitful War optimally, and \nz is the number of points Naomi will score if she plays War optimally.\n \nLimits\n1 <= T <= 50.\nAll the masses given to Ken and Naomi are distinct, and between 0.0 and 1.0 exclusive.\n \nSmall dataset\n1 <= N <= 10.\n \nLarge dataset\n1 <= N <= 1000.\n \n---Input \n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n \n---Output \nCase #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n \n \n'''\n \nimport sys\nfrom time import clock\n \nf = open(sys.argv[1])\ndef input(): return f.readline().strip();\n \n \n \ndef deceitfulWar(Naomi, Ken):\n    Naomi = Naomi[:]\n    Ken = Ken[:]\n    pts = 0\n    while Naomi and Ken and Naomi[-1] > Ken[0]:\n        #Naomi's max is bigger than Ken's min\n        #lie to force him to throw out the min\n        #fore-\"trump\" with smallest bigger card\n        kn = Ken.pop(0)\n        for i in range(len(Naomi)):\n            if Naomi[i] > kn:\n                #since Naomi[-1] > kn, we'll get here\n                Naomi.pop(i)\n                break\n        pts += 1        \n \n    return pts\n \ndef war(Naomi, Ken):\n    Naomi = Naomi[:]\n    Ken = Ken[:]\n    pts = 0\n    while Naomi and Ken:\n        #naomi plays her smallest\n        nm = Naomi.pop(0)\n        if nm > Ken[-1]:\n            #if Ken cannot beat, he plays his smallest\n            Ken.pop(0)\n            pts += 1\n        else:\n            #if he can beat, he finds the smallest above nm\n            for i in range(len(Ken)):\n                if Ken[i] > nm:\n                    #since Ken[-1] > nm, we'll get here\n                    Ken.pop(i)\n                    break          \n    return pts\n \n#clk = clock()\n \nfor caseNo in xrange(1, int(input())+1):\n    #print(>>sys.stderr, caseNo)\n    _ = input()\n    Naomi = sorted(map(float, input().split()))\n    Ken = sorted(map(float, input().split()))\n    print('Case #%d:' % caseNo, deceitfulWar(Naomi, Ken), war(Naomi, Ken))\n     \n#print(>>sys.stderr, 'time= %.1f seconds' % (clock()-clk ))\n \n \n"}
{"author": "fractal", "index": 14, "filename": "2014_2974486_5644738749267968.py", "code": "#! /usr/bin/python3\n \nT = int(input())\n \nfor n in range(1, T+1):\n    blocks = int(input())\n    naomi = [ int(float(a)*(10**5)) for a in input().split() ]\n    ken = [ int(float(a)*(10**5)) for a in input().split() ]\n \n    naomi.sort()\n    ken.sort()\n    dcwar = blocks\n    war = 0\n    i = 0\n    j = 0\n    while i<blocks and j<blocks:\n        if ken[i] > naomi[j]:\n            dcwar -= 1\n        else:\n            i += 1\n        j += 1\n    i = 0\n    j = 0\n    while i<blocks and j<blocks:\n        if ken[i] < naomi[j]:\n            war += 1\n        else:\n            j += 1\n        i += 1\n \n    print(\"Case #%d: %d %d\" % (n, dcwar, war))\n         \n \n"}
{"author": "pawko", "index": 15, "filename": "2014_2974486_5644738749267968.py", "code": "# python 3\nimport string\nimport itertools\nimport sys\n \ndef war_points(N, naomi_sorted, ken_sorted):\n    j=0\n    naomi_points = 0\n    for i in range(N):\n        while j < N and naomi_sorted[i] > ken_sorted[j]:\n            j += 1\n        if j < N:\n            j += 1\n        else:\n            naomi_points += 1\n    return naomi_points\n     \ndef deceitful_war_points(N, naomi_sorted, ken_sorted):\n    j=0\n    naomi_points = 0\n    for i in range(N):\n        while j < N and ken_sorted[i] > naomi_sorted[j]:\n            j += 1\n        if j < N:\n            naomi_points += 1\n            j += 1\n    return naomi_points\n \ndef process_case(N, naomi_sorted, ken_sorted):\n    x1 = deceitful_war_points(N, naomi_sorted, ken_sorted)\n    x2 = war_points(N, naomi_sorted, ken_sorted)\n    return (x1, x2)\n \ndef result_gen(lines):\n    ncases = int(next(lines))\n    for ci in range(1,ncases+1):\n        N = int(next(lines))\n        naomi_sorted = line_of_floats_sorted(next(lines))\n        ken_sorted = line_of_floats_sorted(next(lines))\n        x1, x2 = process_case(N, naomi_sorted, ken_sorted)\n        yield 'Case #{0}: {1} {2}\\n'.format(ci, x1, x2)\n     \ndef line_of_floats_sorted(s):\n    fv = [float(sub) for sub in s.split()]\n    fv.sort()\n    return fv\n \ndef input_gen(f_in):\n    for line in f_in:\n        if line.endswith('\\n'):\n            line = line[:-1]\n        yield line\n \ndef start(basename):\n    infile = basename + '.in'\n    outfile = basename + '.out'\n    f_in = open(infile, 'r')\n    f_out = open(outfile, 'w')\n    f_out.writelines(result_gen(input_gen(f_in)))\n    f_in.close()\n    f_out.close()\n \n##start('D-test')\nstart('D-small-attempt0')\n##start('D-large')\n"}
{"author": "pavlovic", "index": 16, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef play_war(b1, b2):\n\tif 0 == len(b1):\n\t\treturn 0\n \t\t\n\tif b1[0] > b2[0]:\n\t\tb1.pop(0)\n\t\tb2.pop()\n\t\treturn 1 + play_war(b1, b2)\n\telse:\n\t\tb1.pop(0)\n\t\tb2.pop(0)\n\t\treturn play_war(b1, b2)\n \t\t\ndef play_deceitful_war(b1, b2):\n\tif 0 == len(b1):\n\t\treturn 0\n \t\t\n\ti = len(b1) - 1\n\twhile (i >= 0) and (b1[i] < b2[len(b2) - 1]):\n\t\ti -= 1\n \t\t\n\tif i < 0:\n\t\treturn 0\n \t\n \t\n\tb1.pop(i)\n\tb2.pop()\n \n\treturn 1 + play_deceitful_war(b1, b2)\n \n \nt = int(sys.stdin.readline().strip())\n \nfor i in range(t):\n\tprint(\"Case #\" + str(i + 1) + \":\",)\n \n\tn = int(sys.stdin.readline().strip())\n \t\n\tblocks1 = sorted([float(j) for j in sys.stdin.readline().strip().split()], reverse = True)\n\tblocks2 = sorted([float(j) for j in sys.stdin.readline().strip().split()], reverse = True)\n \n\tprint(play_deceitful_war(list(blocks1), list(blocks2)), play_war(blocks1, blocks2))\n \t\n"}
{"author": "bastiandantilus", "index": 17, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n \n    t = int(f.readline())\n    for _t in range(t):\n        N = int(f.readline())\n        Naomi = sorted([float(x) for x in f.readline().split()])\n        Ken = sorted([float(x) for x in f.readline().split()])\n        NMax = max(Naomi)\n        DWScore = 0\n        WScore = 0\n        NaomiW = [x for x in Naomi]\n        KenW = [x for x in Ken]\n        for i in range(N):\n            if(Naomi[-1] > Ken[-1]):\n                DWScore += 1\n                Naomi.pop()\n                Ken.pop()\n            else:\n                Naomi.pop(0)\n                Ken.pop()\n        for i in range(N):\n            Na = NaomiW.pop(0)\n            KWinners = [x for x in KenW if x > Na]\n            if len(KWinners) > 0:\n                KenW.remove(KWinners[0])\n            else:\n                KenW.pop(0)\n                WScore += 1\n        print((\"Case #\" + str(_t+1) + \": \" + str(DWScore) + \" \" + str(WScore)))\n     \n \n"}
{"author": "nooodles", "index": 18, "filename": "2014_2974486_5644738749267968.py", "code": "def PlayDevious(list1, list2):\n    Ret = 0;\n    i = 0;\n    j = 0;\n    while (i < len(list1)):\n        if list1[i] > list2[j]:\n            j += 1;\n        i += 1;\n    return j;\n \ndef PlayWar(list1, list2):\n    j = 0;      Score = 0;\n    for entry in list1:\n        winner = False;\n        while (not winner):\n            if j != len(list2):\n                if list2[j] > entry:\n                    winner = True;\n                j += 1;\n            else:\n                Score += 1;\n                winner = True;\n \n    return Score;\n \ndef PlayWar2(list1, list2):\n    L1 = [];        L2 = [];        Score = 0;\n \n    for i in range(len(list1)):\n        L1.append(list1[i]);        L2.append(list2[i]);\n    L1.reverse();\n \n    Score = 0;\n    for play in L1:\n        index =  0;\n        for i in range(1, len(L2)):\n            if L2[i] > play > L2[i-1]:\n                index = i;\n \n        if play > L2[index]:\n            Score += 1;\n        L2.pop(index);\n    return Score           \n \n \nT = int(raw_input());\nfor q in range(T):\n    N = int(raw_input());\n    Nlist = map(float, raw_input().split());\n    Klist = map(float, raw_input().split());\n \n    Nlist.sort();\n    Klist.sort();\n     \n    print (\"Case #%d:\" % (q+1),)\n    print (PlayDevious(Nlist, Klist), PlayWar(Nlist, Klist))#, PlayWar2(Nlist, Klist);\n"}
{"author": "netsuso", "index": 19, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python3\n# Strategies:\n# 0. Sort both lists of block weights\n# Deceitful War:\n# 1. Walk through her own blocks from the lightest to the heaviest one\n# 2. If the block is lighter than the lightest one from Ken, Naomi will tell a weight slightly lower than Ken's biggest one. So Ken wins, but he loses his heaviest block\n# 3. If the block is heavier than the lightest one from Ken, Naomi will tell a weight slightly higher than Ken's heaviest block. So Naomi wins, and Ken loses his lightest block\n# Standard War:\n# 1. Walk through her own blocks from the heaviest to the lightest one (there's no difference in the order for the result, but this way it's easier to compare)\n# 2. If the block is heavier than the heaviest one from Ken, Naomi wins, and Ken loses his lightest block\n# 3. If the block is lighter than the heaviest one from Ken, Ken wins, and Ken loses his heaviest block\n \nimport sys\n \nncases = int(sys.stdin.readline().strip())\n \nfor t in range(1, ncases+1):\n    nblocks = int(sys.stdin.readline().strip())\n    naomi_blocks = [float(x) for x in sys.stdin.readline().strip().split()]\n    ken_blocks = [float(x) for x in sys.stdin.readline().strip().split()]\n \n    naomi_blocks.sort()\n    ken_blocks.sort()\n \n    # Deceitful War\n    ken_lightest = 0\n    ken_heaviest = nblocks-1\n    points_deceitful = 0\n \n    for i in range(0, nblocks):\n        if naomi_blocks[i] > ken_blocks[ken_lightest]:\n            points_deceitful += 1\n            ken_lightest += 1\n        else:\n            ken_heaviest -= 1\n \n    # Standard War\n    ken_lightest = 0\n    ken_heaviest = nblocks-1\n    points_standard = 0\n \n    for i in range(nblocks-1, -1, -1):\n        if naomi_blocks[i] > ken_blocks[ken_heaviest]:\n            points_standard += 1\n            ken_lightest += 1\n        else:\n            ken_heaviest -= 1\n \n    print(\"Case #{0}: {1} {2}\".format(t, points_deceitful, points_standard))\n"}
{"author": "nwin", "index": 20, "filename": "2014_2974486_5644738749267968.py", "code": "from collections import deque\nfrom bisect import *\ndef solve():\n    n = int(raw_input())\n    a = map(float, raw_input().split())\n    b = map(float, raw_input().split())\n    a.sort()\n    b.sort()\n    da = deque(a)\n    db = deque(b)\n    k = 0\n    while da:\n        if da[0] < db[0]:\n            da.popleft()\n            db.pop()\n        else:\n            da.popleft()\n            db.popleft()\n            k += 1\n    print(k,)\n    k = 0\n    for i, x in enumerate(a):\n        j = bisect(b, x)\n        k = max(k, j - i)\n    print(k)\nfor t in xrange(int(raw_input())):\n    print(\"Case #%d:\" % (t+1),)\n    solve()\n"}
{"author": "joegunrok", "index": 21, "filename": "2014_2974486_5644738749267968.py", "code": "__author__ = 'jrokicki'\n \nimport sys\nRL = lambda: sys.stdin.readline().strip()\nIA = lambda: map(int, RL().split(\" \"))\nLA = lambda: map(long, RL().split(\" \"))\nFA = lambda: map(float, RL().split(\" \"))\n \nT = int(sys.stdin.readline())\n \ndef war(N,K):\n    \"\"\"\n    strategy: N plays lowest number first, K chooses next best number\n    \"\"\"\n    if len(N) == 0: return 0\n    n = N[0]\n    if K[-1] > n:\n        # ken wins\n        k = len(K)-1\n        for k in range(len(K)-1):\n            if K[k] > n and K[k+1] > n:\n                break\n        if K[k] < n: k += 1\n        K = K[:k] + K[k+1:]\n        return war(N[1:],K)\n    else:\n        ## N wins they both play their lowest numbers\n        return 1 + war(N[1:], K[1:])\n \ndef beawoman(N,K):\n    if len(N) == 0: return 0\n    n = N[0]\n    bad = False\n    for i in range(len(N)):\n        if N[i] < K[i]:\n            bad = True\n    if bad:\n        return beawoman(N[1:], K[:-1])\n    else:\n        return 1 + beawoman(N[:-1], K[:-1])\n \nfor CASE in range(T):\n    RL()\n    N = FA()\n    K = FA()\n    N.sort()\n    K.sort()\n    answer = \"%d %d\" % (beawoman(N,K), war(N,K))\n    print(\"Case #%d: %s\" % (CASE+1, answer))\n \n"}
{"author": "idahojacket", "index": 22, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nfrom bisect import bisect_left\n \nnumCases = input()\nfor case in range( 1, numCases + 1 ):\n    N = input()\nNaomis = list( [float(x) for x in raw_input().split() ] )\nKens = list( [float(x) for x in raw_input().split() ] )\nNaomis = sorted( Naomis )\nKens = sorted( Kens )\n \n# sim optimal\nNaomisOptimal = Naomis[:]\nKensOptimal = Kens[:]\n \nKenScore = 0\nfor i in xrange( 0, N ):\n    Naomi = NaomisOptimal.pop()\n    x = bisect_left( KensOptimal, Naomi )\n    if x < len( KensOptimal ):\n        KenScore += 1\n        del KensOptimal[ x ]\n    else:\n        del KensOptimal[ 0 ]\n \nNScore = 0\nfor i in xrange( 0, N ):\n    Naomi = Naomis[0]\n    del Naomis[0]\n    x = bisect_left( Kens, Naomi )\n    if x == 0:\n        Kens.pop()\n    else:\n        NScore += 1\n        del Kens[ 0 ]\n \n    output = str( NScore ) + ' ' + str( N - KenScore )\n   \nprint ('Case #' + str( case ) + ': ' + str( output ))\n"}
{"author": "idolivneh", "index": 23, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nimport time\nimport itertools #use combinations!\nimport random\n \ndef iterate_cases_1lpc(filepath):\t#1lpc = 1 line per case\n\twith file(filepath, 'rb') as f_in:\n\t\tfor line_index, line in enumerate(f_in):\n\t\t\tif line_index == 0: #T\n\t\t\t\tcontinue\n\t\t\tyield line_index, line.strip().split(' ')\n \ndef iterate_cases_nlpc(filepath, n):\t#1lpc = n line per case\n\twith file(filepath, 'rb') as f_in:\n\t\tcase_counter = 1\n\t\tcase = []\n\t\tfor line_index, line in enumerate(f_in):\n\t\t\tif line_index == 0: #T\n\t\t\t\tcontinue\n\t\t\tcase.append(line.strip().split(' '))\n\t\t\tif not line_index % n:\n\t\t\t\tyield case_counter, case\n\t\t\t\tcase_counter += 1\n\t\t\t\tcase = []\n \ndef iterate_cases_glpc(filepath):\t\t#glpc - given lines per case\n\twith file(filepath, 'rb') as f_in:\n\t\tcase_counter = 0\n\t\tnew_case = True\n\t\tfor line_index, line in enumerate(f_in):\n\t\t\tif line_index == 0: #T\n\t\t\t\tcontinue\n\t\t\tif new_case:\n\t\t\t\tnew_case = False\n\t\t\t\tcase_counter += 1\n\t\t\t\tcase = []\n\t\t\t\tassert len(line.strip().split(' ')) == 1\n\t\t\t\tlines_left = int(line.strip())\n\t\t\t\tif not lines_left:\n\t\t\t\t\tnew_case = True\n\t\t\t\t\tyield case_counter, case\n\t\t\t\tcontinue\n\t\t\tif lines_left:\n\t\t\t\tlines_left -= 1\n\t\t\t\tcase.append(line.strip().split(' '))\n\t\t\tif not lines_left:\n\t\t\t\tnew_case = True\n\t\t\t\tyield case_counter, case\n \t\t\t\ndef part_of_list_to_int(array, flags):\n\tassert len(array) == len(flags)\n\toutput = []\n\tfor index, elem in enumerate(array):\n\t\tif flags[index]:\n\t\t\toutput.append(int(elem))\n\t\telse:\n\t\t\toutput.append(elem)\n\treturn output\n \ndef list_to_int(array):\n\treturn part_of_list_to_int(array, [True] * len(array))\n \ndef part_of_list_to_float(array, flags):\n\tassert len(array) == len(flags)\n\toutput = []\n\tfor index, elem in enumerate(array):\n\t\tif flags[index]:\n\t\t\toutput.append(float(elem))\n\t\telse:\n\t\t\toutput.append(elem)\n\treturn output\n \ndef list_to_float(array):\n\treturn part_of_list_to_float(array, [True] * len(array))\n \ndef get_max_array_on_index(array, index):\n\telem_len = len(array[0])\n\tassert index < elem_len\n\tfor elem in array:\n\t\tassert elem_len == len(elem)\n\tmax_sub = array[0][index]\n\tmax_elem = array[0]\n\tfor elem in array:\n\t\tif elem[index] > max_sub:\n\t\t\tmax_sub = elem[index]\n\t\t\tmax_elem = elem\n\treturn max_elem\n \ndef list_index_in_sorted_with_position(a_list, value, pos):\n\tlist_len = len(a_list)\n\tif list_len == 1:\n\t\tif a_list[0] == value:\n\t\t\treturn pos\n\t\treturn -1\n\tif a_list[list_len/2] > value:\n\t\treturn list_index_in_sorted_with_position(a_list[:(list_len/2)], value, pos)\n\telse:\n\t\treturn list_index_in_sorted_with_position(a_list[(list_len/2):], value, pos + (list_len/2))\n \t\ndef list_index_in_sorted_list(a_list, value):\n\treturn list_index_in_sorted_with_position(a_list, value, 0)\n \ndef copy_list(list):\n\tres = []\n\tfor elem in list:\n\t\tres.append(elem)\n\treturn res\t\n \n############################################################\n#### add solution here \t\t\t\t\t\t\t\t\t####\n#### don't forget to change data from str to int/float  ####\n############################################################\n \ndef war_answer_simulator(blocks, choice):\n\tover_arr = []\n\tfor elem in blocks:\n\t\tif elem > choice:\n\t\t\tover_arr.append(elem)\n\tif not over_arr:\n\t\treturn min(blocks)\n\treturn min(over_arr)\n \ndef war_counter(a, b):\n\tcount = 0\n\twhile len(a) and len(b):\n\t\tif a[0] > b[0]:\n\t\t\tcount += 1\n\t\telse:\n\t\t\tb.pop(0)\n\t\ta.pop(0)\n\treturn count\n \ndef dec_counter(a, b):\n\tcount = 0\n\twhile len(a) and len(b):\n\t\tif a[0] < b[0]:\n\t\t\tpass\n\t\telse:\n\t\t\tb.pop(0)\n\t\t\tcount += 1\n\t\ta.pop(0)\n\treturn count\t\n \t\ndef solve(N, N_blocks, K_blocks):\n\tres = None\n \t\n\tN_blocks.sort()\n\tK_blocks.sort()\n\tN_blocks_copy = copy_list(N_blocks)\n\tK_blocks_copy = copy_list(K_blocks)\n \t\n\tN_blocks_copy.reverse()\n\tK_blocks_copy.reverse()\n \t\n\twar_count = war_counter(N_blocks_copy, K_blocks_copy)\n\tprint('war', war_count)\n \t\n\tdec_count = dec_counter(N_blocks, K_blocks)\n\tprint('dec', dec_count)\n \t\n\treturn '%d %d' % (dec_count, war_count)\n \t\n \t\ndef calc_result(case):\n\tresult = None\n \t\n\tN = int(case[0][0])\n\tN_blocks = list_to_float(case[1])\n\tK_blocks = list_to_float(case[2])\n\tprint(N)\n\tprint(N_blocks)\n\tprint(K_blocks)\n \t\n\tresult = solve(N, N_blocks, K_blocks)\n\tprint(result)\n \t\n\treturn result\n \ndef main(filepath):\n\tstart_time = time.time()\n\twith file('output.txt', 'wb') as f_out:\n \t\t\n\t\t######################################\n\t\t#### select input iteration type: ####\n\t\t####\t- iterate_cases_1lpc\t  ####\n\t\t####\t- iterate_cases_nlpc +n\t  ####\n\t\t####\t- iterate_cases_glpc\t  ####\n\t\t######################################\n\t\tfor case_index, case in iterate_cases_nlpc(filepath, 3):\n \t\t\t\n\t\t\tprint(\"case #%d: time:%.02f\" % (case_index, time.time() - start_time))\n\t\t\tresult = calc_result(case)\n \t\t\t\n\t\t\t#######################\n\t\t\t#### format output ####\n\t\t\t#######################\n\t\t\tf_out.write(\"Case #%d: %s\\n\" % (case_index, result))\n \t\t\t\t\nif __name__ == '__main__':\n\tmain(sys.argv[1])\n"}
{"author": "greatlemer", "index": 24, "filename": "2014_2974486_5644738749267968.py", "code": "# Written for Python 2.7.5\n \nfrom optparse import OptionParser\nfrom StringIO import StringIO\nimport sys\n \n# Expected format of TEST_CASES is a list of tuples of (input, expected_output)\nTEST_CASES = [\n    (\"\"\"4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n\"\"\",\"\"\"Case #1: 0 0\nCase #2: 1 0\nCase #3: 2 1\nCase #4: 8 4\n\"\"\")\n]\n \ndef parse_input(input_reader):\n    case_count = int(input_reader.readline())\n    case_idx = 0\n    while case_count > case_idx:\n        case_idx += 1\n        block_count = int(input_reader.readline())\n        naomi_blocks = [float(x) for x in input_reader.readline().split(\" \")]\n        ken_blocks = [float(x) for x in input_reader.readline().split(\" \")]\n        input_values = {\"case\":case_idx,\n                        \"naomi\": naomi_blocks,\n                        \"ken\": ken_blocks,\n                        \"block_count\": block_count\n                        }\n        yield input_values\n \n \ndef solve_problem(output_writer=sys.stdout, **kwargs):\n    ken = sorted(kwargs[\"ken\"])\n    naomi = sorted(kwargs[\"naomi\"])\n    case = kwargs[\"case\"]\n    block_count = kwargs[\"block_count\"]\n \n    dw_idx = 0\n    w_idx = 0\n \n    w_score = 0\n    dw_score = 0\n \n    for block in naomi:\n        if block > ken[dw_idx]:\n            dw_score += 1\n            dw_idx += 1\n    naomi = sorted(naomi, key=lambda x: -x)\n    ken = sorted(ken, key=lambda x: -x)\n    for block in naomi:\n        if block > ken[w_idx]:\n            w_score += 1\n        else:\n            w_idx += 1\n \n    print >> output_writer, \"Case #%d: %d %d\" % (case, dw_score, w_score)\n \n     \n    # Implementation of code to solve the problem.\n    # Use 'print >> output_writer, \"Thing\"' to output values.\n \ndef solve_inputs(input_reader, output_writer):\n    \"\"\"\n    Loop through each problem input in input reader and solve it.\n \n    Outputs responses to output_writer.\n    \"\"\"\n    for input_values in parse_input(input_reader):\n        solve_problem(output_writer=output_writer, **input_values)\n \ndef run_tests():\n    idx = 0\n    all_pass = True\n    for problem_input, expected_output in TEST_CASES:\n        idx += 1\n        input_reader = StringIO(problem_input)\n        output_writer = StringIO()\n        solve_inputs(input_reader, output_writer)\n        problem_output = output_writer.getvalue()\n        if problem_output == expected_output:\n            print (\"Test %d: Success\" % idx)\n        else:\n            all_pass = False\n            print (\"Test %d: Failure\" % idx)\n        input_reader.close()\n        output_writer.close()\n    if all_pass:\n        print (\"All tests were successful!\")\n    else:\n        print (\"Something didn't match - try again.\")\n \ndef main():\n    parser = OptionParser()\n    parser.add_option(\"-f\", \"--file\",\n                    dest=\"filename_stem\",\n                    help=\"read input from FILE.in and write to FILE.out\",\n                    metavar=\"FILE\")\n \n    (options, args) = parser.parse_args()\n    if options.filename_stem:\n        print (\"Running in file mode.\")\n        input_reader = open(\"%s.in\" % options.filename_stem, \"r\")\n        output_writer = open(\"%s.out\" % options.filename_stem, \"w\")\n        solve_inputs(input_reader, output_writer)\n    else:\n        print (\"Running in test mode.\")\n        run_tests()\n \nif __name__ == \"__main__\":\n    main()"}
{"author": "fizu", "index": 25, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef readint():\n    return int(sys.stdin.readline())\n \ndef readfloatarray():\n    return map(float, sys.stdin.readline().strip().split())\n \ndef readintarray():\n    return map(int, sys.stdin.readline().strip().split())\n \ndef readpairs(start=0):\n    elems = readintarray()[start:]\n    return [elems[i:i+2] for i in xrange(0, len(elems), 2)]\n \ndef readstring():\n    return sys.stdin.readline()[:-1]\n \n"}
{"author": "anavaleije", "index": 26, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef pointsWar(naomi, ken, N):\n\tpoints = 0\n\tiNaomi = 0\n\tiKen = 0\n\twhile iNaomi < N and iKen < N:\n\t\tif naomi[iNaomi] > ken[iKen]:\n\t\t\tpoints += 1\n\t\telse:\n\t\t\tiNaomi += 1\n\t\tiKen += 1\n\treturn points\n \ndef pointsDeceitfulWar(naomi, ken, N):\n\tpoints = N\n\tiNaomi = 0\n\tiKen = 0\n\twhile iNaomi < N and iKen < N:\n\t\tif naomi[iNaomi] > ken[iKen]:\n\t\t\tiKen += 1\n\t\telse:\n\t\t\tpoints -= 1\n\t\tiNaomi += 1\n\treturn points\n \n##########################################################\n# Main\n \ninputFileName = sys.argv[1]\n \nf = file(inputFileName)\nfout = file(\"output.txt\", \"w\")\n \nT = int(f.readline())\n \nfor case in xrange(T):\n\tN = int(f.readline().strip())\n\tnaomi = f.readline().strip().split()\n\tken = f.readline().strip().split()\n \n\tfor i in xrange(N):\n\t\tnaomi[i] = (float(naomi[i]),\"N\")\n\t\tken[i] = (float(ken[i]),\"K\")\n \n\tnaomi.sort()\n\tken.sort()\n \n\t##### Output writing\n\tfout.write(\"Case #%d: %d %d\\n\" %(case + 1, pointsDeceitfulWar(naomi, ken, N), pointsWar(naomi, ken, N)))\n"}
{"author": "pyronimous", "index": 27, "filename": "2014_2974486_5644738749267968.py", "code": "\n \nINPUT = 'D-small-attempt3.in'\nOUTPUT = 'D-small-attempt3.out'\n \n \ndef solve(N, naomis, kens):\n    naomis.sort()\n    kens.sort()\n \n    def play_war(naomis, kens):\n        score = 0\n        for game_round in range(N):\n            nweight = naomis.pop(0)\n            if nweight > kens[-1]:\n                kweight = kens.pop(0)\n            else:\n                for i, weight in enumerate(kens):\n                    if weight > nweight:\n                        kweight = kens.pop(i)\n                        break\n            if nweight > kweight:\n                score += 1\n        return score\n \n    def play_deceitful_war(naomis, kens):\n        score = 0\n        crap = 0\n        for i, weight in enumerate(naomis):\n            if weight < kens[i]:\n                crap += 1\n \n        for game_round in range(N):\n            if crap:\n                ntold = kens[-1] - 0.0000001\n                crap -= 1\n            else:\n                ntold = naomis[-1]\n            nweight = naomis.pop(0)\n \n            if ntold > kens[-1]:\n                kweight = kens.pop(0)\n            else:\n                for i, weight in enumerate(kens):\n                    if weight > ntold:\n                        kweight = kens.pop(i)\n                        break\n            if nweight > kweight:\n                score += 1\n        return score \n \n    return play_deceitful_war(naomis[:], kens[:]), play_war(naomis[:], kens[:])\n \n \nif __name__ == '__main__':\n    inp = open(INPUT)\n    out = open(OUTPUT, 'w')\n     \n    T = int(inp.readline())\n \n    for case in range(T):\n        N = int(inp.readline())\n        naomis = map(float, inp.readline().split())\n        kens = map(float, inp.readline().split())\n        sol = solve(N, naomis, kens)\n        out.write('Case #%i: %i %i\\n' % (case + 1, sol[0], sol[1]))"}
{"author": "j3ffreysmith", "index": 28, "filename": "2014_2974486_5644738749267968.py", "code": "__author__ = 'Jeffrey'\n \n# inFileName = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-sample.in\"\ninFileName = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-small-attempt0.in\"\n# inFileName = \"C:\\\\Users\\\\Jeffrey\\\\IdeaProjects\\\\Google Code Jam 2014\\\\D-large.in\"\n \noutFileName = inFileName[: -2] + \"out\"\n \n \ndef parseInput(f):\n    T = int(f.readline())\n    L = []\n \n    for i in range(T):\n        f.readline()\n        L.append(([float(j) for j in f.readline().split()], [float(j) for j in f.readline().split()]))\n        L[-1][0].sort()\n        L[-1][1].sort()\n \n    return T, L\n \n \ndef calculateScores(naomi, ken):\n    return [calcDeceit(naomi, ken), calcHonest(naomi, ken)]\n \ndef calcDeceit(naomi, ken):\n    wins = 0\n    while len(naomi) > 0:\n        if naomi[-1] > ken[-1]:\n            naomi = naomi[ : -1]\n            ken = ken[ : -1]\n            wins += 1\n        else:\n            naomi = naomi[1: ]\n            ken = ken[ : -1]\n    return wins\n \ndef calcHonest(naomi, ken):\n    wins = 0\n    while len(naomi) > 0:\n        n = naomi.pop(0)\n        k = ken[0]\n        for i in range(len(ken)):\n            kTemp = ken[i]\n            if kTemp > n:\n                k = ken.pop(i)\n                break\n        else:\n            ken.pop(0)\n            wins += 1\n    return wins\n \n \n \ndef playGame(T, L):\n    for i in range(T):\n        result = calculateScores(L[i][0], L[i][1])\n        yield \"Case #{}: {} {}\".format(i + 1, result[0], result[1])\n \n \nif __name__ == \"__main__\":\n    iF = open(inFileName, 'r')\n    T, L = parseInput(iF)\n    iF.close()\n \n    print(T)\n    for l in L:\n        print()\n        for k in l:\n            print(k)\n \n    oF = open(outFileName, \"wb\")\n    for out in playGame(T, L):\n        print(out)\n        # print(bytes(out, 'utf-8'), file=oF)\n        oF.write(bytes(out + \"\\n\", 'utf-8'))\n    oF.close()\n"}
{"author": "yoba", "index": 29, "filename": "2014_2974486_5644738749267968.py", "code": "import collections\nimport functools\nimport operator\n \n \ndef optimal_war_step(blocks, value):\n \n    win_blocks = set(filter(lambda block: block > value, blocks))\n    blocks.discard(min(win_blocks if win_blocks else blocks))\n    return bool(win_blocks)\n \n \ndef deceitful_war(ken, naomi, epsilon = 10 ** (-6)):\n \n    while ken:\n \n        min_ken = min(ken)\n        max_ken = max(ken)\n        min_naomi = min(naomi)\n \n        if min_ken > min_naomi and any(map(lambda bs: operator.lt(*bs), zip(sorted(naomi), sorted(ken)))):\n \n            yield max_ken - epsilon\n \n        else:\n \n            yield 1.0 - epsilon\n \n        naomi.discard(min_naomi)\n \n \nfor i in range(int(input())):\n \n    input()\n    naomi = set(map(float, str.split(input())))\n    ken = set(map(float, str.split(input())))\n \n    dwar_ken = ken.copy()\n    dwar_naomi = naomi.copy()\n    dwar = collections.Counter(map(functools.partial(optimal_war_step, dwar_ken), deceitful_war(dwar_ken, dwar_naomi)))\n    war = collections.Counter(map(functools.partial(optimal_war_step, ken), naomi))\n    print(str.format(\"Case #{}: {} {}\", i + 1, dwar[False], war[False]))\n"}
{"author": "eko", "index": 30, "filename": "2014_2974486_5644738749267968.py", "code": "import os, re, sys\nimport unittest\n \n \n#tCase = sys.stdin.readline().split()\ntCase = int(sys.stdin.readline())\n \ndef ken(bet, list):\n\tfor i in list:\n\t\tif i >= bet:\n\t\t\tlist.remove(i)\n\t\t\treturn i, list\n \t\n\tx = list[0]\n\tlist.remove(x)\n\treturn x, list\n \t\ndef naomi(YList, ZList):\n\tl1 = list(YList)\n\tl2 = list(ZList)\n \t\n\twhile len(l1) > 0:\n\t\tcy = l1.pop()\n\t\tcz = l2.pop()\n \n\t\tif (cy < cz):\n\t\t\t#if len(l2) > 0:\n\t\t\t\treturn YList[0], ZList[len(ZList)-1]\n\t\t\t#else:\n\t\t\t#\treturn cz, cy\n \t\t\n\treturn YList[len(YList)-1], ZList[len(ZList)-1]\n \t\t\ndef main(YList, ZList):\n\tdnp = 0\n\tnp = 0\n\t#YList.sort(reverse=True)\n\tYList.sort()\n\tZList.sort()\n \t\n\tYList2 = list(YList)\n\tZList2 = list(ZList)\n \t\n\tYList.sort()\n\t#print(YList)\n\t#print(ZList)\n \t\n\twhile len(YList) > 0:\n\t\tcy, ty = naomi(YList, ZList)\n\t\tYList.remove(cy)\t\t\n\t\tcz, ZList = ken(ty, ZList)\n\t#\tprint(cy, ty,  cz)\n\t\tif (cy > cz):\n\t\t\tdnp += 1\n \t\t\t\n\twhile len(YList2) > 0:\n\t\tcy = YList2.pop()\n\t\tcz, ZList2 = ken(cy, ZList2)\n\t\t#print(cy, cz)\n\t\tif (cy > cz):\n\t\t\tnp += 1\n \t\t\t\n \t\t\t\n \t\n \n\treturn str(dnp) + \" \" + str(np)\n \t\t\n  \nif __name__ == '__main__':\n\t#unittest.main()\n\tfor i in xrange(tCase):\t\n\t\t#frase = [str(x) for x in sys.stdin.readline().split(' ')]\t\n\t\t#print(\"Case #%d: %s\" % (i + 1, main(frase[0])))\n \t\t\n\t\t##Numbers\n\t\tN = [int(x) for x in sys.stdin.readline().split(' ')]\n\t\tYList = [float(x) for x in sys.stdin.readline().split(' ')]\n\t\tZList = [float(x) for x in sys.stdin.readline().split(' ')]\n\t\t#print(E,R,N, NList)\n\t\tprint(\"Case #%d: %s\" % (i + 1, main(YList, ZList)))"}
{"author": "shishkander", "index": 31, "filename": "2014_2974486_5644738749267968.py", "code": "def CASE(IN):\n    def rstr(): return IN.readline().strip()\n    def rint(): return int(rstr())\n    def rfs(): return map(float, rstr().split())\n    N = rint()\n    A = sorted(rfs())\n    B = sorted(rfs())\n    dwar = solve(N, A, B)\n    war = N - solve(N, B, A)\n    return \"%i %i\" % (dwar, war)\n \n \ndef solve(N, A, B):\n    i, j = 0, 0\n    while True:\n        while j < N and A[j] < B[i]:\n            j += 1\n        if j == N:\n            return i\n        i += 1\n        j += 1\n \n \ndef RUN(IN, OUT):\n    t = int(IN.readline().strip())\n    for i in xrange(1,t+1):\n        OUT.write(\"Case #%i: %s\\n\" % (i, CASE(IN)))\n \nif __name__ == \"__main__\":\n    import sys\n    RUN(sys.stdin, sys.stdout)\n"}
{"author": "caethan", "index": 32, "filename": "2014_2974486_5644738749267968.py", "code": "#Template code developed by Brett Olsen (brett.olsen@gmail.com), 2013\n#for the Google Code Jam programming contest\n \n###############################################################################\n# Imports go here\n###############################################################################\n \n#For faster numerical analysis\nimport numpy as np\n \nimport sys\n \n#Needed for the memoization decorator\nimport collections\nimport functools\n \n###############################################################################\n# Global variables (for caching, etc.) go here\n###############################################################################\n \n###############################################################################\n# Decorators (taken from http://wiki.python.org/moin/PythonDecoratorLibrary)\n###############################################################################\n \nclass memoize(object):\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n    If called later with the same arguments, the cached value is returned\n    (not reevaluated).\n    \"\"\"\n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n    def __call__(self, *args):\n        if not isinstance(args, collections.Hashable):\n            # uncacheable. a list, for instance.\n            # better to not cache than blow up.\n            return self.func(*args)\n        if args in self.cache:\n            return self.cache[args]\n        else:\n            value = self.func(*args)\n            self.cache[args] = value\n            return value\n    def __repr__(self):\n        '''Return the function's docstring.'''\n        return self.func.__doc__\n    def __get__(self, obj, objtype):\n        '''Support instance methods.'''\n        return functools.partial(self.__call__, obj)\n \n###############################################################################\n# Functions\n###############################################################################\n \ndef precalculate():\n    \"\"\"Perform any calculations that need to be performed before the main path\n    (e.g., preparing lookup tables, etc.)\n     \n    N.B. Make sure you make any important variables global so that other\n    functions can access them.\n    \"\"\"\n    pass\n \ndef read_input(infile):\n    \"\"\"This function should take an open input file, load in all of the\n    relevant information for a single case of the problem, and output it\n    as a single object.    \n    \"\"\"\n    #Some utility functions to read in particular types of input\n    def read_int():\n        return int(infile.readline().strip())\n    def read_ints():\n        return np.array(infile.readline().split(), dtype=int)\n    def read_bigints(): #For ints that won't fit directly in an int32 array\n        line = infile.readline().split()\n        return np.array(map(lambda x: int(x), line))\n    def read_float():\n        return float(infile.readline().strip())\n    def read_floats():\n        return np.array(infile.readline().split(), dtype=float)\n    def read_string():\n        return infile.readline().strip()\n    def read_strings():\n        return np.array(infile.readline().split(), dtype=object) #N.B. general dtype\n     \n    N = read_int()\n    naomi = read_floats()\n    ken = read_floats()\n    naomi.sort()\n    ken.sort()\n    assert len(naomi) == N\n    assert len(ken) == N\n     \n    return naomi, ken\n \ndef ken_choice(told_naomi, ken, ken_free):\n    #Ken's strategy is as follows:  if he has no block heavier than what Naomi\n    #tells him, then he chooses his smallest block.  Otherwise, he chooses the smallest\n    #block that is heavier than what she tells him.\n    #N.B. ken should be provided as a sorted list from smallest to largest.\n    N = len(ken)\n    lowest = None\n    for j in range(N):\n        if not ken_free[j]:\n            continue\n        if lowest is None:\n            lowest, idx = ken[j], j\n        if ken[j] > told_naomi:\n            return ken[j], j\n    return lowest, idx\n \ndef normal_war(naomi, ken):\n    #Naomi's strategy is to play blocks from largest to smallest,\n    #Ken's strategy is to play the smallest block that could beat Naomi's,\n    #or the smallest block if he has none that can do so.\n    #Runs as N^2, fast enough even with N=1000\n     \n    #Appears to be validated as the best strategy, checked it with \n    #a complete exponential solution on the small import - no differences.\n    N = len(naomi)\n    ken_free = np.ones(N, dtype=bool)\n    score = 0\n    for i in range(N)[::-1]:\n        chosen_naomi = naomi[i]\n        chosen_ken, j = ken_choice(chosen_naomi, ken, ken_free)\n        ken_free[j] = False\n         \n        if chosen_naomi > chosen_ken:\n            score += 1\n    return score\n \n \ndef new_deceitful_war(naomi, ken):\n    score = 0\n     \n    N = len(naomi)\n     \n    for i in range(N):\n        if naomi[-1] > ken[-1]:\n            score += 1\n            naomi = naomi[:-1]\n            ken = ken[:-1]\n        else:\n            naomi = naomi[1:]\n            ken = ken[:-1]\n    return score\n \n \ndef deceitful_war(naomi, ken):\n    #Naomi certainly can't win with blocks that are lower than all of Ken's\n    #blocks.  But Naomi can lie about these blocks' weight to use up key blocks\n    #of Ken's. \n     \n     \n    #, and will also lose against all of Ken's blocks that are larger\n    #than all of her blocks.  So Naomi can lie using her lowest blocks to\n    #use up Ken's highest blocks to remove these guaranteed losses.\n     \n     \n    #Naomi's strategy is to use her no-hopers (those that are lower\n    #than all of Ken's blocks) to fish out Ken's highest weight blocks.\n    #Then she uses her lowest blocks to fish out any of Ken's best blocks\n    #that will beat all of hers\n    N = len(naomi)\n    no_hopers = 0\n    for i in range(N):\n        if naomi[i] < ken[0]:\n            no_hopers += 1\n    #Some of Ken's blocks might be larger than all of hers\n    def_losses = 0\n    for i in range(N)[::-1]:\n        if ken[i] > naomi[-1]:\n            def_losses += 1\n     \n    #Then she goes through the rest and tries to win in order\n    edge = max(no_hopers, def_losses)\n    naomi = naomi[edge:]\n    ken = ken[:N-edge]\n \n    '''\n    print \"After removing sure losers:\"\n    print N, N-edge, edge\n    if N - edge > 0:\n        if min(naomi) < max(ken):\n            print naomi\n            print ken\n    '''\n \n    #print len(naomi), len(ken), edge\n \n    score = 0\n    for i in range(N - edge):\n        if naomi[i] > ken[i]:\n            score += 1\n             \n    return score\n \ndef solve_case(case):\n    \"\"\"Take the input data (structured in case) and perform any necessary\n    calculations to obtain the desired output, formatted as the appropriate\n    string.    \n    \"\"\"\n     \n    naomi, ken = case\n    print (naomi)\n    print (ken)\n     \n    new = new_deceitful_war(naomi, ken)\n     \n    good, bad = deceitful_war(naomi, ken), normal_war(naomi, ken)\n     \n    if not new == good:\n        print ('Hey!', new, good)\n     \n    output = \"%i %i\" % (new, bad)\n    return output\n \n###############################################################################\n# Main execution path\n###############################################################################\n \nif __name__ == \"__main__\":\n    #Do any pre-calculations required\n    precalculate()\n     \n    #Open up the input & output files based on the provided input file\n    assert len(sys.argv) == 2 #only one argument\n    assert sys.argv[1][-3:] == \".in\" #input must end with .in\n    infile = open(\"%s\" % sys.argv[1], 'r')\n    outfile = open(\"%s.out\" % sys.argv[1][:-3], 'w')\n     \n    #Read in the number of cases (the first input line) to iterate through\n    cases = int(infile.readline().strip('\\n'))\n    for i in range(cases):\n         \n        #Read in the input data for this case\n        case = read_input(infile)\n         \n        #Solve the problem for this case\n        output = solve_case(case)\n         \n        #Write out the output of this case\n        outfile.write('Case #%i: %s\\n' % (i+1, output))\n        print ('Case #%i: %s\\n' % (i+1, output))\n     \n    #Close files\n    infile.close()\n    outfile.close()"}
{"author": "rainmayecho", "index": 33, "filename": "2014_2974486_5644738749267968.py", "code": "def war(n, k):\n    k.sort()\n    score = 0\n    for x in n:\n        for i  in xrange(len(k)):\n            if k[i] > x:\n                score += 1\n                k.pop(i)\n                break\n    return len(n) - score    \n             \n \ndef deceit(n, k):\n    n.sort()\n    k.sort()\n    score = 0\n    for y in k:\n        for i in xrange(len(n)):\n            if n[i] > y:\n                score +=1\n                n.pop(i)\n                break\n    return score\n     \n \nf = open('Dsmall.in', 'r')\ng = open('outputD.txt', 'w')\n \ndata = [[float(e) for e in line.strip(\"\\n\").split(' ')] for line in f]\nT = int(data.pop(0)[0])\nc = 1\nfor i in xrange(0, T*3, 3):\n    N = data[i+1]\n    K = data[i+2]\n \n    w = war(N, list(K))\n    d = deceit(list(N), list(K))\n    g.write('Case #%i: %i %i\\n' %(c, d, w))\n    c += 1\n \nf.close()\ng.close()\n \n"}
{"author": "bigonion", "index": 34, "filename": "2014_2974486_5644738749267968.py", "code": "directory = 'C:/users/me/desktop/google code jam/2014/qualification/D/'\n \nfrom copy import deepcopy\nimport itertools\n \n \nfrom random import choice\n \nINCREASING = 501\nDECREASING = 502\nNO_ORDER = 503\n \ndef play_war (l_n, l_k, inc_val):\n    assert inc_val in [INCREASING, DECREASING, NO_ORDER]\n    assert len(l_n) == len(l_k)\n    if inc_val == INCREASING:\n        l_n = list(sorted(l_n))\n    if inc_val == DECREASING:\n        l_n = list(reversed(sorted(l_n)))\n    l_k = list(sorted(l_k))\n    naomi_wins = 0\n    for i in range(len(l_n)):\n        val = l_n[0]\n        l_n = l_n[1:]\n        if l_k[-1] < val:\n            l_k = l_k[1:]\n            naomi_wins += 1\n        else:\n            for j in range(len(l_k)):\n                if l_k[j] > val:\n                    del l_k[j]\n                    break\n \n    return naomi_wins\n \n \ndef play_deceitful (l_n, l_k):\n    l_n = list(sorted(l_n))\n    l_k = list(sorted(l_k))\n    naomi_wins = 0\n    assert len(l_n) == len(l_k)\n    while len(l_n):\n        if l_n[-1] < l_k[-1]:\n            l_n = l_n[1:]\n            l_k = l_k[:-1]\n        else:\n            l_n = l_n[:-1]\n            l_k = l_k[:-1]\n            naomi_wins += 1\n    return naomi_wins\n             \n             \ndef solve (f_in, f_out):\n    T = int(f_in.readline())\n    for testcase in range(1,T+1):\n        N = int(f_in.readline())\n        l_n = [float(x) for x in f_in.readline().split()]\n        l_k = [float(x) for x in f_in.readline().split()]\n \n        a1 = play_war (l_n, l_k, INCREASING)\n        a2 = play_war (l_n, l_k, DECREASING)\n        a3 = play_war (l_n, l_k, NO_ORDER)\n        assert a1 == a2\n        assert a2 == a3\n        b = play_deceitful (l_n, l_k)\n \n        f_out.write('Case #' + str(testcase) + ': ' + str(b) + ' ' + str(a1) + '\\n')\n \n \n         \n         \n \n     \ndef main_run():\n    import os\n    import time\n    filenames = [x for x in os.listdir (directory)]\n    filenames = [x for x in filenames if x.endswith('.in')]\n    l1 = [(os.stat(directory+x).st_mtime, x) for x in filenames]\n    chosen_filename =  sorted(l1)[-1][1][:-3]\n \n    print(('Directory : ', directory))\n    print(('Chosen Filename : ',chosen_filename))\n    print()\n    print(('Start : ', time.ctime()))\n    print()\n     \n    f_in = open(directory+chosen_filename+'.in')\n    f_out = open(directory+chosen_filename+'.out', 'w')\n    solve(f_in,f_out)\n    f_in.close()\n    f_out.close()\n \n    print(())\n    print(('End : ', time.ctime()))\n \n \nmain_run()\n \ndef randomize_arrs (n):\n    l = []\n    for i in range(2*n):\n        r = choice(range(2**30))\n        while r in l:\n            r = choice(range(2**30))\n        l.append(r)\n    return l[:n], l[n:]\n \n"}
{"author": "sickmath", "index": 35, "filename": "2014_2974486_5644738749267968.py", "code": "f = open('input.in')\ng = open('output', 'w')\n \nT = int(f.readline()[:-1])\n \nfor case in xrange(T) :\n    N = int(f.readline()[:-1])\n    Naomi = sorted(map(float, f.readline()[:-1].split()))\n    Ken = sorted(map(float, f.readline()[:-1].split()))\n    Ken2 = Ken[:]\n    War, DWar = 0, 0\n    for n in Naomi :\n        if n > max(Ken) :\n            Ken.pop(0)\n            War += 1\n        else :\n            for i, k in enumerate(Ken) :\n                if k > n : break\n            Ken.pop(i)\n    Ken = Ken2\n    for n in Naomi :\n        if n < min(Ken) :\n            Ken.pop(-1)\n        else :\n            Ken.pop(0)\n            DWar += 1\n    output = 'Case #' + str(case + 1) + ': ' + str(DWar) + ' ' + str(War)\n    g.write(output + '\\n')\n    print(output)\n \nf.close()\ng.close()\n"}
{"author": "tamaeguchi", "index": 36, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n#\n# Problem D. Deceitful War\n# https://code.google.com/codejam/contest/2974486/dashboard#s=p3\n#\n \nimport sys\n \n \ndef solve1(naomi, ken):\n    # Deceitful War\n    win = 0\n    while naomi:\n        chosenK = max(ken)\n        chosenN = min(filter(lambda mass: mass > chosenK, naomi) or naomi)\n        if chosenN > chosenK:\n            win += 1\n        naomi.remove(chosenN)\n        ken.remove(chosenK)\n    return win\n \n \ndef solve2(naomi, ken):\n    # War\n    win = 0\n    while naomi:\n        chosenN = min(naomi)\n        chosenK = min(filter(lambda mass: mass > chosenN, ken) or ken)\n        if chosenN > chosenK:\n            win += 1\n        naomi.remove(chosenN)\n        ken.remove(chosenK)\n    return win\n \n \ndef main(IN, OUT):\n    T = int(IN.readline())\n    for index in range(T):\n        N = int(IN.readline())\n        naomi = map(float, IN.readline().split())\n        ken = map(float, IN.readline().split())\n        OUT.write('Case #%d: %d %d\\n' % (index + 1, solve1(naomi[:], ken[:]), solve2(naomi[:], ken[:])))\n \n \ndef makesample(maxN=1000, T=50):\n    import random\n    print(T)\n    for index in range(T):\n        N = random.randint(1, maxN)\n        print(N)\n        print(' '.join(map(str, (random.random() for n in range(N)))))\n        print(' '.join(map(str, (random.random() for n in range(N)))))\n \n \nif __name__ == '__main__':\n    if '-makesample' in sys.argv[1:]:\n        makesample()\n    else:\n        main(sys.stdin, sys.stdout)\n \n"}
{"author": "anb", "index": 37, "filename": "2014_2974486_5644738749267968.py", "code": "from sys import stdin\n \n \ndef read_str(): return stdin.readline().rstrip('\\n')\ndef read_int(): return int(stdin.readline())\ndef read_ints(): return map(int, stdin.readline().split())\ndef read_floats(): return map(float, stdin.readline().split())\n \n     \ndef war(N, K):\n    points = 0\n    j = 0\n    for i in range(len(N)):\n        while j < len(K) and K[j] < N[i]:\n            j += 1\n        if j == len(K):\n            points += 1\n        else:\n            j += 1\n    return points\n \n \ndef deceitful_war(N, K):\n    return len(N) - war(K, N)\n     \n \ndef solve_case():\n    read_int()\n    N = sorted(read_floats())\n    K = sorted(read_floats())\n     \n    return '{} {}'.format(deceitful_war(N, K), war(N, K))\n \n     \ndef main():\n    cases = read_int()\n    for case in range(1, cases + 1):\n        print('Case #{}: {}'.format(case, solve_case()))\n \n         \nmain()\n"}
{"author": "kawasaki", "index": 38, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \nimport bisect\n \nT = int(raw_input())\nfor test_case in xrange(1, T + 1):\n    N = int(raw_input())\n    W1 = sorted(map(float, raw_input().split()))\n    W2 = sorted(map(float, raw_input().split()))\n \n    y = 0\n    c1 = c2 = 0\n    while c1 < N and c2 < N:\n        if W2[c2] < W1[c1]:\n            y += 1\n            c1 += 1\n            c2 += 1\n        while c1 < N and c2 < N and W1[c1] < W2[c2]:\n            c1 += 1\n \n    z = N\n    c1 = c2 = 0\n    while c1 < N and c2 < N:\n        if W1[c1] < W2[c2]:\n            z -= 1\n            c1 += 1\n            c2 += 1\n        while c1 < N and c2 < N and W2[c2] < W1[c1]:\n            c2 += 1\n \n    print('Case #{}: {} {}'.format(test_case, y, z))\n"}
{"author": "michael", "index": 39, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \ndef read_line():\n    return sys.stdin.readline().rstrip( '\\n' )\n \ndef read_integer():\n    return int( read_line() )\n \ndef read_floats():\n    return [ float( x ) for x in read_line().split() ]\n \nT = read_integer()\nfor t in range( T ):\n    N = read_integer()\n    naomi = sorted( read_floats() )\n    ken = sorted( read_floats() )\n    k = len( ken ) - 1\n    h = 0\n    for n in reversed( naomi ):\n        if ken[ k ] > n:\n            k -= 1\n        else:\n            h += 1\n    d = 0\n    n = len( naomi ) - 1\n    for k in reversed( ken ):\n        if naomi[ n ] > k:\n            d += 1\n            n -= 1\n    print('Case #%i:' % ( t + 1 ), d, h)\n"}
{"author": "xoxie", "index": 40, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nfrom collections import deque\n \nf = open(sys.argv[1])\nf.readline()\n \nnumCase = 1\nl = f.readline()\nwhile l != \"\":\n\tn = [float(x) for x in f.readline().split()]\n\tk = [float(x) for x in f.readline().split()]\n \n\tn.sort()\n\tnd = deque(n)\n\tk.sort()\n\tkd = deque(k)\n \n\twar = 0\n\twhile len(nd) > 0:\n\t\tnblock = nd.pop()\n\t\tif nblock > kd[-1]:\n\t\t\tkd.popleft()\n\t\t\twar += 1\n\t\telse:\n\t\t\tkd.pop()\n \n\tall = [ (x,1) for x in n ]\n\tall.extend( [(x,2) for x in k] )\n\tall.sort()\n \n\tdwar = 0\n\tnd = deque(n)\n\tkd = deque(k)\n\twhile len(nd) > 0:\n\t\tif nd[0] < kd[0]:\n\t\t\tkd.pop()\n\t\telse:\n\t\t\tkd.popleft()\n\t\t\tdwar += 1\n\t\tnd.popleft()\n \t\t\n\tprint(\"Case #\"+str(numCase)+ \": \"+str(dwar)+\" \"+str(war))\\n \t\\n \\n\tnumCase += 1\\n\tl = f.readline()"}
{"author": "oonishi", "index": 41, "filename": "2014_2974486_5644738749267968.py", "code": "# coding: cp932\n \n \nlines = iter('''\n4\n1\n0.5\n0.6\n2\n0.7 0.2\n0.8 0.3\n3\n0.5 0.1 0.9\n0.6 0.4 0.3\n9\n0.186 0.389 0.907 0.832 0.959 0.557 0.300 0.992 0.899\n0.916 0.728 0.271 0.520 0.700 0.521 0.215 0.341 0.458\n'''.splitlines(False)[1:])\nimport sys\nout = sys.stdout\n \nsys.setrecursionlimit(1500)\n \nlines = iter(open(r'D-small-attempt2.in').readlines(False))\nout = open('d-small.answer', 'w')\n \n#lines = iter(open(r'D-large.in').readlines(False))\n#out = open('d-large.answer', 'w')\n \ncaseCnt = int(next(lines))\n \ndef solve(N, K):\n\tif N == [] and K == []:\n\t\treturn 0\n\tif K[-1] > N[-1]:\n\t\treturn solve(N[:-1], K[1:])\n\telse:\n\t\treturn solve(N[:-1], K[:-1])+1\n \nfor case in range(1, caseCnt+1):\n\tC = int(next(lines))\n\tN = sorted(map(float, next(lines).split()), reverse=True)\n\tK = sorted(map(float, next(lines).split()), reverse=True)\n \t\n\t# if C == 1:\n\t\t# if N[0] > K[0]:\n\t\t\t# print('Case #%d: 1 1'%case, file=out)\n\t\t# else:\n\t\t\t# print('Case #%d: 0 0'%case, file=out)\n\t\t# continue\n \t\n\tW=0\n\tk = 0\n\tfor i, n in enumerate(N):\n\t\tif n < K[k]:\n\t\t\tk += 1\n\t\telse:\n\t\t\tW += 1\n \t\n\tD = solve(N, K)\n\tprint('Case #%d: %d %d'%(case, D, W), file=out)\n\t#import pdb;pdb.set_trace()\n \t\n"}
{"author": "maxbublis", "index": 42, "filename": "2014_2974486_5644738749267968.py", "code": "\"\"\"\nGoogle Code Jam 2014 Qualification Problem D\nUsage:\n    python d.py < input.txt > output.txt\n\"\"\"\nimport sys\n \n \ndef memoized(func):\n    cache = {}\n    def wrapped(*args):\n        if not args in cache:\n            cache[args] = func(*args)\n        return cache[args]\n    return wrapped\n \n \n@memoized\ndef play_dwar(naomi_blocks, ken_blocks):\n    if not naomi_blocks:\n        return 0\n \n    max_score = 0\n \n    for naomi_choice in naomi_blocks:\n        naomi_remaining = tuple(b for b in naomi_blocks if b != naomi_choice)\n \n        ken_better = tuple(b for b in ken_blocks if b > naomi_choice)\n        ken_worse = tuple(b for b in ken_blocks if b < naomi_choice)\n \n        if ken_better and not ken_worse:\n            ken_choice = max(ken_better)\n            ken_remaining = tuple(b for b in ken_blocks if b != ken_choice)\n            score = 0 + play_dwar(naomi_remaining, ken_remaining)\n        else:\n            ken_remaining = tuple(b for b in ken_blocks if b != min(ken_blocks))\n            score = 1 + play_dwar(naomi_remaining, ken_remaining)\n \n        max_score = max(max_score, score)\n \n    return max_score\n \n \n@memoized\ndef play_war(naomi_blocks, ken_blocks):\n    if not naomi_blocks:\n        return 0\n \n    max_score = 0\n \n    for naomi_choice in naomi_blocks:\n        naomi_remaining = tuple(b for b in naomi_blocks if b != naomi_choice)\n \n        ken_better = tuple(b for b in ken_blocks if b > naomi_choice)\n \n        if ken_better:\n            ken_choice = min(ken_better)\n            ken_remaining = tuple(b for b in ken_blocks if b != ken_choice)\n            score = 0 + play_war(naomi_remaining, ken_remaining)\n        else:\n            ken_remaining = tuple(b for b in ken_blocks if b != min(ken_blocks))\n            score = 1 + play_war(naomi_remaining, ken_remaining)\n \n        max_score = max(max_score, score)\n \n    return max_score\n \n \ndef solve_problem(naomi_blocks, ken_blocks):\n    return play_dwar(naomi_blocks, ken_blocks), play_war(naomi_blocks, ken_blocks)\n \n \nif __name__ == \"__main__\":\n    num_of_cases = int(sys.stdin.readline().strip())\n    for i in xrange(1, num_of_cases + 1):\n \n        num_of_blocks = int(sys.stdin.readline().strip())\n \n        naomi_blocks = tuple(map(float, sys.stdin.readline().strip().split()))\n        ken_blocks = tuple(map(float, sys.stdin.readline().strip().split()))\n \n        print(\"Case #{0}: {1} {2}\".format(i, *solve_problem(naomi_blocks, ken_blocks)))\n"}
{"author": "ronnodas", "index": 43, "filename": "2014_2974486_5644738749267968.py", "code": "def findmin(l,y):\n    for (i,x) in enumerate(l):\n        if x>y:\n            return i\n    return None\n \nT = int(input())\nfor case in range(1,T+1):\n    N = int(input())\n    Ns = [float(x) for x in input().split()]\n    Ks = [float(x) for x in input().split()]\n \n    Ns.sort()\n    Ks.sort()\n    bad = 0\n \n    Ns1 = Ns[:]\n    Ks1 = Ks[:]\n    while Ns1:\n        y = Ks1.pop()\n        if Ns1[-1]>y:\n            i = findmin(Ns1,y)\n            Ns1[i:i+1]=[]\n            bad += 1\n        else:\n            Ns1[:1] = []\n \n    good = 0\n    Ns2 = Ns[:]\n    Ks2 = Ks[:]\n    for x in Ns2:\n        if Ks2[-1]>x:\n            i = findmin(Ks2,x)\n            Ks2[i:i+1]=[]\n        else:\n            Ks2[:1]=[]\n            good += 1\n \n    print(\"Case #\",case,\": \",bad,' ',good,sep = '')\n"}
{"author": "taichino", "index": 44, "filename": "2014_2974486_5644738749267968.py", "code": "# -*- coding: utf-8 -*-\n \nimport sys\nimport copy\n \nT = int(sys.stdin.readline())\n \nfor T in range(1, T+1):\n    N = int(sys.stdin.readline())\n    naomi_blocks = map(float, sys.stdin.readline().split(' '))\n    ken_blocks = map(float, sys.stdin.readline().split(' '))\n \n    # # War\n    naomi_blocks_w = sorted(copy.deepcopy(naomi_blocks))\n    ken_blocks_w = sorted(copy.deepcopy(ken_blocks))\n    naomi_score_w, ken_score_w = (0, 0)\n    for i in range(N):\n        naomi = naomi_blocks_w.pop()\n \n        ken = None\n        for k in ken_blocks_w:\n            if k > naomi:\n                ken = k\n                break\n        if not ken:\n            ken = ken_blocks_w[0]\n        ken_blocks_w.remove(ken)\n \n        if naomi > ken:\n            naomi_score_w += 1\n        else:\n            ken_score_w += 1\n     \n    # Deceitful War    \n    naomi_blocks_dw = sorted(copy.deepcopy(naomi_blocks), reverse=True)\n    ken_blocks_dw = sorted(copy.deepcopy(ken_blocks))\n    naomi_score_dw, ken_score_dw = (0, 0)\n    for i in range(N):\n        naomi = naomi_blocks_dw.pop()\n        ken = min(ken_blocks_dw)\n        if ken > naomi:\n            ken = max(ken_blocks_dw)\n        ken_blocks_dw.remove(ken)            \n        if naomi > ken:\n            naomi_score_dw += 1\n        else:\n            ken_score_dw += 1\n     \n    ans = '%s %s' % (naomi_score_dw, naomi_score_w)\n    print('Case #%(T)s: %(ans)s' % locals())\n"}
{"author": "coconutbig", "index": 45, "filename": "2014_2974486_5644738749267968.py", "code": "def solve_case(t):\n    n = int(raw_input().strip())\n    naomi = sorted([float(num) for num in raw_input().strip().split()])\n    ken = sorted([float(num) for num in raw_input().strip().split()])\n \n    #print(naomi)\n    #print(ken)\n \n    i, j = 0, 0\n    while j < n:\n        if ken[j] > naomi[i]:\n            i += 1\n        j += 1\n    optimal_result = n - i\n \n    deceit_result = 0\n    while n > 0:\n        if naomi[0] < ken[0]:\n            ken.pop()\n        else:\n            deceit_result += 1\n            ken = ken[1:]\n        naomi = naomi[1:]\n        n -= 1\n     \n    #deceit_result = 0\n    #while n > 0 and naomi[-1] > ken[-1]:\n    #    deceit_result += 1\n    #    naomi.pop()\n    #    ken.pop()\n    #    n -= 1\n \n    #k, l = 0, n - 1\n    #while k < n and l >= 0 and naomi[k] < ken[l]:\n    #    l -= 1\n    #    k += 1\n \n    #deceit_result += n - k\n \n    print('Case #%d: %d %d' % (t, deceit_result, optimal_result,))\n \ndef main():\n    t = int(raw_input().strip())\n    for i in range(1, t + 1):\n        solve_case(i)\n \nif __name__ == '__main__':\n    main()\n"}
{"author": "kmod", "index": 46, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nif __name__ == \"__main__\":\n    f = sys.stdin\n    if len(sys.argv) >= 2:\n        fn = sys.argv[1]\n        if fn != '-':\n            f = open(fn)\n \n    T = int(f.readline())\n    for _T in xrange(T):\n        N = int(f.readline())\n        naomi = map(float, f.readline().split())\n        ken = map(float, f.readline().split())\n        assert len(ken) == len(naomi) == N\n \n        naomi = [(w, 1) for w in naomi]\n        ken = [(w, 0) for w in ken]\n \n        blocks = ken + naomi\n        blocks.sort(reverse=True)\n        blocks = [p[1] for p in blocks]\n        # print(blocks)\n \n        honest = 0\n        adv = 0\n        for b in blocks:\n            if b == 1:\n                adv += 1\n                honest = max(honest, adv)\n            else:\n                adv -= 1\n \n        deceitful = 0\n        kept = 0\n        for b in blocks:\n            if b == 1:\n                kept += 1\n            else:\n                if kept:\n                    kept -= 1\n                    deceitful += 1\n        print(\"Case #%d: %d %d\" % (_T+1, deceitful, honest))\n"}
{"author": "lookingfor", "index": 47, "filename": "2014_2974486_5644738749267968.py", "code": "T = int(raw_input())\n \ndef solve(a, b):\n    n = len(a)\n    a.sort()\n    b.sort()\n    i = j = m = M = 0\n    while i < n:\n        if a[i] > b[j]:\n            M += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n    i = j = 0\n    while j < n:\n        if b[j] > a[i]:\n            m += 1\n            i += 1\n            j += 1\n        else:\n            j += 1\n    return str(M) + \" \" + str(n-m)\n \nfor z in xrange(T):\n    n = int(raw_input())\n    a = map(float, raw_input().split())\n    b = map(float, raw_input().split())\n    print(\"Case #%d: %s\" % (z+1, solve(a, b)))"}
{"author": "jakab922", "index": 48, "filename": "2014_2974486_5644738749267968.py", "code": "T = int(raw_input().strip())\n \nfor i in xrange(T):\n\tN = int(raw_input().strip())\n\tnaomi = sorted(map(float, raw_input().strip().split(' ')))\n\t# print(\"naomi: %s\"  % naomi)\n\tken = sorted(map(float, raw_input().strip().split(' ')))\n\t# print(\"ken: %s\" % ken)\n \n\twar_score = N\n\tnp = 0\n\tkp = 0\n\twhile np < N and kp < N:\n\t\twhile kp < N and naomi[np] >= ken[kp]:\n\t\t\tkp += 1\n\t\tif kp < N:\n\t\t\tkp += 1\n\t\t\tnp += 1\n\t\t\twar_score -= 1\n \n\td_war_score = N\n\tbest = None\n\tfor start_from in xrange(N):\n\t\tj = 0\n\t\tgood = True\n\t\twhile start_from + j < N:\n\t\t\tif ken[j] >= naomi[start_from + j]:\n\t\t\t\tgood = False\n\t\t\t\tbreak\n\t\t\tj += 1\n\t\tif good:\n\t\t\tbest = N - start_from\n\t\t\tbreak\n\tif best is not None:\n\t\td_war_score = best\n\telse:\n\t\td_war_score = 0\n \n\tprint(\"Case #%s: %s %s\" % (i + 1, d_war_score, war_score))\n"}
{"author": "gizzywump", "index": 49, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\n \nimport collections\n \nimport math\nimport re\nimport sys\n \n#sys.setrecursionlimit(50)\n \nINPUT = \"tiny\"\nINPUT = \"D-small-attempt0.in\"\n#INPUT = \"D-large.in\"\n \ndef debug(*args):\n    return\n    sys.stderr.write(str(args) + \"\\n\")\n \nclass Memoize:\n    def __init__(self,function):\n        self._cache = {}\n        self._callable = function\n             \n    def __call__(self, *args, **kwds):\n        cache = self._cache\n        key = self._getKey(*args,**kwds)\n        try: return cache[key]\n        except KeyError:\n            cachedValue = cache[key] = self._callable(*args,**kwds)\n            return cachedValue\n     \n    def _getKey(self,*args,**kwds):\n        return kwds and (args, ImmutableDict(kwds)) or args    \n \ndef war_wins(N, K):\n    wins = 0\n    debug(N, K)\n    #import pdb; pdb.set_trace()\n    while 1:\n        if len(N) == 0:\n            return wins\n        N,n = N[:-1], N[-1]\n        if n > K[-1]:\n            wins += 1\n            K = K[1:]\n            continue\n        for idx, v in enumerate(K):\n            if v > n:\n                break\n        K = K[:idx] + K[idx+1:]\n \ndef dwar_wins(N, K):\n    wins = 0\n    while 1:\n        if len(N) == 0:\n            return wins\n        n, N = N[0], N[1:]\n        if n > K[0]:\n            wins += 1\n            K = K[1:]\n        else:\n            K = K[:-1]\n \n \ndef do_trial(N, K):\n    N.sort()\n    K.sort()\n    dww = dwar_wins(N, K)\n    ww = war_wins(N, K)\n    return \"%d %d\" % (dww, ww)\n \nf = file(INPUT)\nT = int(f.readline()[:-1])\nfor i in range(T):\n    f.readline()\n    N = [float(x) for x in f.readline().split()]\n    K = [float(x) for x in f.readline().split()]\n    v = do_trial(N, K)\n    print(\"Case #%d: %s\" % (i+1, v))\n"}
{"author": "chevaliermalfet", "index": 50, "filename": "2014_2974486_5644738749267968.py", "code": "inputFile = open('D-small-attempt0.in', 'r')\nlines = inputFile.readlines()\ninputFile.close()\n \noutputFile = open('D-small-attempt0.out', 'w')\n \nnumTests = int(lines[0])\n \ndef scoreWar(naomiNums, kenNums):\n    naomiInd = 0\n    kenInd = 0\n    while naomiInd < len(naomiNums):\n        naomiPlay = naomiNums[naomiInd]\n        while kenInd < len(kenNums) and kenNums[kenInd] < naomiPlay:\n            kenInd += 1\n        if kenInd == len(kenNums):\n            break\n        naomiInd += 1\n        kenInd += 1\n    return len(naomiNums) - naomiInd\n \ndef scoreDeceit(naomiNums, kenNums):\n    naomiInd = 0\n    kenInd = 0\n    while kenInd < len(kenNums):\n        kenPlay = kenNums[kenInd]\n        while naomiInd < len(naomiNums) and naomiNums[naomiInd] < kenPlay:\n            naomiInd += 1\n        if naomiInd == len(naomiNums):\n            break\n        naomiInd += 1\n        kenInd += 1\n    return kenInd\n \nfor i in range(1, numTests+1):\n    naomiNums = map(lambda x: float(x), lines[3*i-1].split())\n    kenNums = map(lambda x: float(x), lines[3*i].split())\n    naomiNums.sort()\n    kenNums.sort()\n    deceitScore = scoreDeceit(naomiNums, kenNums)\n    warScore = scoreWar(naomiNums, kenNums)\n    outputFile.write('Case #'+str(i)+': ' + str(deceitScore) + ' ' + str(warScore) + '\\n')\n \noutputFile.close()\n"}
{"author": "amv", "index": 51, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\nimport sys,os\nimport numpy as np\n \n \ndef Solve(N,n,k):\n    n.sort(reverse=True)\n    k.sort(reverse=True)\n    nDW=0\n    i_n,i_k=0,0\n    while i_n<N and i_k<N:\n        if n[i_n]>k[i_k]:\n            nDW+=1\n            i_n+=1\n            i_k+=1\n        else:\n            i_k+=1\n \n    nW=0\n    i_n,i_k=0,0\n    while i_n<N and i_k<N:\n        if n[i_n]<k[i_k]:\n            nW+=1\n            i_n+=1\n            i_k+=1\n        else:\n            i_n+=1\n \n    nW=N-nW\n    return '%d %d'%(nDW,nW)\n \n \n \ndef parse(infile):\n    N=int(infile.readline().strip())\n    n=map(float, infile.readline().split() )\n    k=map(float, infile.readline().split() )\n    return N,n,k\n \n \n \nclass GCJ_Parser( object ):\n    def __init__(self,fname):\n        self.infile=open(fname,'r')\n        self.NumCases=int(self.infile.readline().strip() )\n        self.caseNum=0\n \n    def __iter__(self): return self\n \n    def next(self):\n        if self.caseNum==self.NumCases: raise StopIteration\n        self.caseNum += 1\n        args=parse(self.infile)\n        return self.caseNum , args\n \n \ndef runmain():\n    myCases=GCJ_Parser(sys.argv[1])\n \n    #Open output file, but don't overwrite old ones (for comparison)\n    outname=sys.argv[1].rstrip('.in')+'.out'\n    if os.path.isfile(outname):\n        oldout=outname+'.old'\n        ii=0\n        while os.path.isfile(oldout):\n            ii+=1\n            oldout=outname+'.old'+str(ii)\n        os.rename(outname,oldout)\n        print ('Rename: %s -> %s'%(outname,oldout))\n  \n    outfile=open(outname,'w')\n \n    for iCase, args in myCases:\n        answer=Solve(*args)\n \n        print ('Case #'+str(iCase)+':',answer)\n        print >> outfile, 'Case #'+str(iCase)+':',answer\n \n \n \n \nif __name__=='__main__':\n    runmain()\n"}
{"author": "yordan", "index": 52, "filename": "2014_2974486_5644738749267968.py", "code": "import copy\nimport sys\n \n \ndef ken(naomi_told, kens_blocks):\n\theavier = list(filter(lambda b: b > naomi_told, kens_blocks))\n\tif heavier:\n\t\tchosen = min(heavier)\n\telse:\n\t\tchosen = min(kens_blocks)\n\tkens_blocks.remove(chosen)\n\treturn chosen\n \n \ndef remove_lightest(blocks):\n\tlightest = sorted(blocks)[0]\n\tblocks.remove(lightest)\n\treturn lightest\n \n \ndef remove_heaviest(blocks):\n\theaviest = sorted(blocks)[-1]\n\tblocks.remove(heaviest)\n\treturn heaviest\n \n \ndef dwar(naomis_blocks, kens_blocks):\n\twins = 0\n\tkens_blocks = copy.copy(kens_blocks)\n\tfor block in sorted(naomis_blocks):\n\t\tif any(map(lambda x: x < block, kens_blocks)):\n\t\t\t# Ken got a lighter block\n\t\t\twins += 1\n\t\t\tremove_lightest(kens_blocks)\n \n\t\telif any(map(lambda x: x > block, kens_blocks)):\n\t\t\t# Ken got a heavier block\n\t\t\tremove_heaviest(kens_blocks)\n\treturn wins\n \n \ndef war(naomis_blocks, kens_blocks):\n\twins = 0\n\tkens_blocks = copy.copy(kens_blocks)\n\tfor block in naomis_blocks:\n\t\tk = ken(block, kens_blocks)\n\t\tif block > k:\n\t\t\twins += 1\n\treturn wins\n \n \ndef read_case(f):\n\tN = int(f.readline())\n\tnaomis_blocks = list(map(float, f.readline().split()))\n\tkens_blocks = list(map(float, f.readline().split()))\n\treturn N, naomis_blocks, kens_blocks\n \n \ndef solve(n, k):\n\treturn '{} {}'.format(dwar(n, k), war(n, k))\n \n \ndef main():\n\tfn = sys.argv[1]\n\twith open(fn, encoding='utf-8') as f:\n\t\tncases = int(f.readline())\n\t\tfor case in range(1, ncases + 1):\n\t\t\tN, naomi, ken = read_case(f)\n\t\t\tsolution = solve(naomi, ken)\n\t\t\tprint('Case #{}: {}'.format(case, solution))\n \n \nif __name__ == '__main__':\n\tmain()"}
{"author": "rmmh", "index": 53, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\nif len(sys.argv) == 1:\n    sys.stdin = open(\"D.in\")\nelse:\n    sys.stdin = open(sys.argv[1])\n \ndef to_floats(s):\n    return map(float, s.split())\n \ndef get_floats():\n    return to_floats(raw_input())\n \nn_cases = input()\n \n# Ken strategy: pick smallest block larger than\n#     claimed one, else use smallest block\n \ndef cheat(our_blocks, opp_blocks):\n    # Cheat strategy: eliminate opponents\n    # largest blocks with our smallest, until all our\n    # blocks are larger than corresponding\n    n_blocks = len(our_blocks)\n    burned = 0\n    while any(our_blocks[x+burned] < opp_blocks[x] for x in xrange(0, n_blocks - burned)):\n        burned += 1\n    return n_blocks - burned\n \ndef fair(our_blocks, opp_blocks):\n    # Our strategy: use blocks smallest to largest\n    score = 0\n    opp_left, opp_right = 0, len(opp_blocks)-1\n    for our in our_blocks:\n        for n, opp in enumerate(opp_blocks):\n            if opp > our:\n                opp_blocks.pop(n)\n                break\n        else:\n            score += 1\n            opp_blocks.pop(0)\n    return score\n \nfor case in xrange(1, n_cases + 1):\n    n_blocks, = get_floats()\n    our_blocks = sorted(get_floats())\n    opp_blocks = sorted(get_floats())\n \n    deceitful_score = cheat(our_blocks, opp_blocks)\n    fair_score = fair(our_blocks, opp_blocks)\n \n    print(\"Case #%d: %d %d\" % (case, deceitful_score, fair_score))\n"}
{"author": "rajabaz", "index": 54, "filename": "2014_2974486_5644738749267968.py", "code": "def solve(naomi, ken):\n    N = list(sorted(naomi))\n    K = list(sorted(ken))\n    pd = 0\n    while len(N) > 0:\n        if N[0] > K[0]:\n            pd += 1\n            N.pop(0)\n            K.pop(0)\n        else:\n            N.pop(0)\n            K.pop(-1)\n    pn = 0\n    N = list(sorted(naomi))\n    K = list(sorted(ken))\n    while len(N) > 0:\n        n = N.pop(0)\n        if n < K[0]:\n            K.pop(0)\n        else:\n            found = None\n            for i,k in enumerate(K):\n                if k > n:\n                    found = i\n                    break\n            if found is not None:\n                K.pop(found)\n            else:\n                K.pop(0)\n                pn += 1\n    return pd,pn\n \nif __name__==\"__main__\":\n    T = int(raw_input())\n    for i in range(1,T+1):\n        raw_input()\n        naomi = map(float, raw_input().split())\n        ken = map(float, raw_input().split())\n        x,y = solve(naomi,ken)\n        print(\"Case #%d: %d %d\" %(i,x,y))\n"}
{"author": "royf", "index": 55, "filename": "2014_2974486_5644738749267968.py", "code": "\nimport math\nimport itertools\nimport numpy as NP\n \ndef read_word(f):\n    return next(f).strip()\n \ndef read_int(f, b=10):\n    return int(read_word(f), b)\n \ndef read_letters(f):\n    return list(read_word(f))\n \ndef read_digits(f, b=10):\n    return [int(x, b) for x in read_letters(f)]\n \ndef read_words(f, d=' '):\\n    return read_word(f).split(d)\\n \\ndef read_ints(f, b=10, d=' '):\\n    return [int(x, b) for x in read_words(f, d)]\\n \\ndef read_floats(f, d=' '):\\n    return [float(x) for x in read_words(f, d)]\\n \\ndef read_arr(f, R, reader=read_ints, *args, **kwargs):\\n    return [reader(f, *args, **kwargs) for i in range(R)]\\n \\ndef solve(solver, fn, out_fn=None):\\n    in_fn = fn + '.in'\n    if out_fn is None:\n        out_fn = fn + '.out'\n    with open(in_fn, 'r') as fi:\n        with open(out_fn, 'w') as fo:\n            T = read_int(fi)\n            for i in range(T):\n                case = read_case(fi)\n                res = solver(case)\n                write_case(fo, i, res)\n \n################################################################################\n \ndef read_case(f):\n    N = read_int(f)\n    MN = read_floats(f)\n    MK = read_floats(f)\n    return (N, MN, MK)\n \ndef write_case(f, i, res):\n    f.write('Case #%d: '%i)\n    f.write('%d %d'%res)\n    f.write('\\n')\n \n################################################################################\n \ndef solve_small(case):\n    (N, MN, MK) = case\n    MN = sorted(MN)\n    MK = sorted(MK)\n    y = 0\n    i = 0\n    for j in range(N):\n        while i < N and MN[i] < MK[j]:\n            i += 1\n        if i < N:\n            y += 1\n            i += 1\n    z = N\n    j = 0\n    for i in range(N):\n        while j < N and MN[i] > MK[j]:\n            j += 1\n        if j < N:\n            z -= 1\n            j += 1\n    return (y, z)\n \ndef solve_large(case):\n    return solve_small(case)\n \nDEBUG = 'i'\n \nfrom run import *\n"}
{"author": "cheilman", "index": 56, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\n \nimport puzutils\n \nclass War_2014_QD(puzutils.CodeJamProblem):\n    def __init__(self, inputFilename):\n        puzutils.CodeJamProblem.__init__(self, inputFilename)\n    \n        self.T = None\n    \n    def load(self):\n        \"\"\"\n        input:\n    \n        T (number of test cases)\n    \n        N (number of blocks)\n        N1 N2 N3 ... (mass of Naomi's blocks, real)\n        K1 K2 K3 ... (mass of Ken's blocks, real)\n    \n        \"\"\"\n    \n        self.tests = []\n    \n        with open(self.inputFilename, \"rt\") as file:\n            self.T = int(file.readline().strip())\n    \n        for i in xrange(self.T):\n            N = int(file.readline().strip())\n            naomi = [float(x) for x in file.readline().split(' ')]\n            ken = [float(x) for x in file.readline().split(' ')]\n    \n            test = {'N': N, 'Naomi': naomi, 'Ken': ken}\n    \n            self.tests.append(test)\n    \n        return True\n    \n    def playWar(self, naomi, ken):\n        \"\"\"\n        How many points does naomi get when playing standard War?\n        \"\"\"\n    \n        if (len(naomi) <= 0):\n            return 0\n    \n        # Just choose the biggest?\n        maxN = max(naomi)\n    \n        # Can ken win?\n        maxK = max(ken)\n    \n        if maxK > maxN:\n            # Ken uses the smallest one that will beat her\n            k = min([x for x in ken if x > maxN])\n        \n            #print \"Ken wins (%.3f > %.3f), max %.3f\" % (k, maxN, maxK)\n        \n            naomi.remove(maxN)\n            ken.remove(k)\n        \n            return 0 + self.playWar(naomi, ken)\n        else:\n            # Ken loses his smallest\n            k = min(ken)\n        \n            #print \"Ken loses (%.3f < %.3f), max %.3f\" % (k, maxN, maxK)\n        \n            naomi.remove(maxN)\n            ken.remove(k)\n        \n            return 1 + self.playWar(naomi, ken)\n    \n    def playDWar(self, naomi, ken):\n        \"\"\"\n        How many points does naomi get when playing decietful war?\n        \"\"\"\n    \n        if (len(naomi) <= 0):\n            return 0\n    \n        minN = min(naomi)\n        minK = min(ken)\n        maxK = max(ken)\n    \n        if (minN < minK):\n        # This is a guaranteed loser, take a big one down with it\n            naomi.remove(minN)\n            ken.remove(maxK)\n            return 0 + self.playDWar(naomi, ken)\n    \n        # Use our smallest one to beat his smallest one, by lying and\n        # saying ours is bigger than his biggest\n        naomi.remove(minN)\n        ken.remove(minK)\n        return 1 + self.playDWar(naomi, ken)\n    \n    def executeTest(self, test):\n        \"\"\"\n        Run a test and return output.\n        \"\"\"\n    \n        dwar = self.playDWar(list(test['Naomi']), list(test['Ken']))\n        war = self.playWar(list(test['Naomi']), list(test['Ken']))\n        return \"%d %d\" % (dwar, war)\n \nwith War_2014_QD(sys.argv[1]) as problem:\n    problem.load()\n \nproblem.run()\n"}
{"author": "elmoatasem", "index": 57, "filename": "2014_2974486_5644738749267968.py", "code": "'''\nCreated on Apr 11, 2014\n \n@author: mostasem\n'''\ndef solveWar(Naomi, Ken):\n    NPoints = 0\n    while(len(Naomi) != 0):\n        Nmax = max(Naomi)\n        Kmax = max(Ken)\n        Kmin = min(Ken)\n        if(Nmax > Kmax):\n            NPoints += 1\n            Naomi.remove(Nmax)\n            Ken.remove(Kmin)\n        else:\n            Naomi.remove(Nmax)\n            Ken.remove(Kmax)\n    return NPoints\n \n \ndef getKeyWithMaxValue(dict_):\n  \n    keys = dict_.keys()\n    currentKey = 0.0\n    min_val = 10000000000000000\n    for i in range(len(keys)): \n        if(min_val > dict_.get(keys[i])):\n            min_val = dict_.get(keys[i])\n            currentKey = keys[i]\n        elif(min_val == dict_.get(keys[i])):\n            if(currentKey > keys [i]):\n                currentKey = keys[i]\n             \n    return currentKey\n \n         \ndef updateWeights(Naomi, Ken):  \n    NaomiHash = {}     \n    for i in range(len(Naomi)):\n        if(NaomiHash.get(Naomi[i]) == None):\n                NaomiHash[Naomi[i]] = 0\n        for j in range(len(Ken)):\n            if(Naomi[i] > Ken [j]):\n                    NaomiHash[Naomi[i]] += 1\n    return NaomiHash\n \n \ndef checkIFAllBigger(NaomiHash,Ken):\n    k = len(Ken)\n    allBigger = True\n    values = list(NaomiHash.values());\n    for i in range(k):\n        found = False\n        for j in range(len(values)):\n            if(values [j] >= k - i):\n                #print values\n                values.remove(values[j])\n                found = True\n                break\n        if(not found):\n            allBigger = False\n            break\n    return allBigger\n \ndef solveDecitfulWar(Naomi, Ken):\n    NPoints = 0\n    NaomiHash = updateWeights(Naomi, Ken)\n    while(len(Naomi) != 0):\n        #print NaomiHash\n        #print \"Ken\",len(Ken)\n        if(checkIFAllBigger(NaomiHash,Ken)):\n            NPoints += len(Ken)\n            break\n        NChoice = getKeyWithMaxValue(NaomiHash)\n        print (NChoice)\n        Kmax = max(Ken)\n        Kmin = min(Ken)\n        if(NChoice > Kmax):\n            NPoints += 1\n            Naomi.remove(NChoice)\n            NaomiHash[NChoice] = 10000000000000000\n            Ken.remove(Kmin)\n        else:\n            Naomi.remove(NChoice)\n            NaomiHash[NChoice] = 10000000000000000\n            Ken.remove(Kmax)\n        NaomiHash = updateWeights(Naomi, Ken)\n         \n    return NPoints\n \n \n  \nf_r = open('D.in',\"r\")\nn_test=int(f_r.readline().strip()) \nf_w = open(\"D.out\", \"w\")\nresult = \"\"\nfor i in range(n_test):\n    list_len = int(f_r.readline().strip()) \n    Naomi = map(float,f_r.readline().split())\n    Ken = map(float,f_r.readline().split())\n     \n    Naomi2 = list(Naomi)\n    Ken2 = list(Ken)\n    #print Naomi ,Ken\n    p1 =  solveWar(Naomi, Ken)\n    p2 =  solveDecitfulWar(Naomi2, Ken2)\n    result = str(p2)+\" \"+str(p1)\\n    #print result\\n    output_str='Case #{itr}: {res}'.format(itr=(i+1),res=result)\n    f_w.write(output_str+'\\n')\n     \nf_r.close()"}
{"author": "entropy", "index": 58, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \n \ndef normal(ken, nao):\n    total = 0\n    k = ken[:]\n    for i in nao[::-1]:\n        if i > ken[-1]:\n            k = k[1:]\n        else:\n            for e in range(len(k)):\n                if k[e] > i:\n                    del k[e]\n                    total += 1\n                    break\n    return total\n \ndef deceit(ken, nao):\n    k = ken[:]\n    n = nao[:]\n    while(len(n) > 0 and len(n) > 0 and (n[0] < k[0] or n[-1] < k[-1])):\n            n = n[1:]\n            k = k[:-1]\n    return len(n)\n    # total = 0\n    # for i in k[::-1]:\n    #     if n[-1] < i:\n    #         n = n[1:]\n    #     else:\n    #         for e in range(len(n)):\n    #             if n[e] > i:\n    #                 del n[e]\n    #                 total += 1\n    #                 break\n    # return total\n \n \n     \n \n \n \ndef main():\n    # filename = \"D-small-attempt0.in\"\n    filename = \"D-small-attempt1.in\"\n    # filename = \"D-large.in\"\n    # filename = \"sample.in\"\n \n    inp = open(filename, \"rU\")\n \n    n = int(inp.readline().strip())\n \n    for case in range(1, n + 1):\n        count = int(inp.readline().strip())\n        nao = sorted(map(float, inp.readline().strip().split()))\n        ken = sorted(map(float, inp.readline().strip().split()))\n \n        war = count - normal(ken, nao)\n        dwar = normal(nao, ken)\n \n        print(\"Case #{}: {} {}\".format(case, dwar, war))\n        # print(count)\n        # print(nao)\n        # print(ken)\n        # print(list(map((lambda x: x[0] > x[1]), zip(nao,ken))))\n        # print()\n \nmain()"}
{"author": "nlse", "index": 59, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/python\n \nimport sys\nimport re\nimport math\nimport string\n \nf = open(sys.argv[1],'r')\n \nnum = int(f.readline())\n \nfor i in range(num):\n    f.readline()\n    na = [float(x) for x in f.readline().split()]\n    ke = [float(x) for x in f.readline().split()]\n    na.sort()\n    ke.sort()\n    dw = 0\n    index = 0\n    for x in ke:\n        while index < len(na) and na[index] <= x:\n            index += 1\n        if index == len(na):\n            break\n        dw += 1\n        index += 1\n    w = 0\n    index = 0\n    na.reverse()\n    ke.reverse()\n    for x in na:\n        if ke[index] > x:\n            index += 1\n        else:\n            w += 1\n    print('Case #{}: {} {}'.format(i+1, dw, w))\n"}
{"author": "hannanaha", "index": 60, "filename": "2014_2974486_5644738749267968.py", "code": "import os\nimport time\nimport decimal\nimport functools\n \n#===============================================================================\n# Generic helpers\n#===============================================================================\n# TODO FOR 14 : rounding functions, graph manipulation, desert lion, AttrDict\n \n#EOL = os.linesep - using this causes weird \\r\\r\\n problems\nEOL = \"\\n\"\n \n# ------------------------------------------------------------------------------\n \ndef is_equal_approx(x, y, epsilon=1e-6):\n    \"\"\"Returns True iff y is within relative or absolute 'epsilon' of x.\n     \n    By default, 'epsilon' is 1e-6.\n    \"\"\"\n    # Check absolute precision.\n    if -epsilon <= x - y <= epsilon:\n        return True\n \n    # Is x or y too close to zero?\n    if -epsilon <= x <= epsilon or -epsilon <= y <= epsilon:\n        return False\n \n    # Check relative precision.\n    return (-epsilon <= (x - y) / x <= epsilon\n        or -epsilon <= (x - y) / y <= epsilon)\n   \ndef read_syms(fd):\n    \"\"\"Read a line of whitespace separated symbols.\"\"\"\n    return fd.readline().strip().split()\n \ndef read_ints(fd):\n    \"\"\"Read a line of whitespace separated integers.\"\"\"\n    return [int(p) for p in read_syms(fd)]\n \ndef read_floats(fd):\n    \"\"\"Read a line of whitespace separated floats.\"\"\"\n    return [float(p) for p in read_syms(fd)]\n \n# ------------------------------------------------------------------------------\n \nclass Mtrx(object):\n    \"\"\"A matrix object.\"\"\"\n     \n    def __init__(self, rows, cols, data):\n        assert len(data) == rows * cols\n        self.rows = rows\n        self.cols = cols\n        self.data = data\n         \n    def cell(self, r, c):\n        return self.data[r * self.cols + c]\n     \n    def getrow(self, i):\n        return [self.cell(i, c) for c in xrange(self.cols)]\n \n    def getcol(self, i):\n        return [self.cell(c, i) for c in xrange(self.rows)]\n     \n    @classmethod\n    def readfromfile(cls, fd, readfunc, rows=None, cols=None):\n        \"\"\"Read matrix from file, assuming first line at location is `R C`.\n         \n        Return a new Mtrx object. Reading values is performed by the `readfunc`.\n        Pre-determined size can be passed using `rows` and `cols`.\n        \"\"\"\n        data = []\n        if rows is None:\n            assert cols is None\n            rows, cols = read_ints(fd)\n        else:\n            assert cols is not None\n        for _ in range(rows):\n            line = readfunc(fd)\n            assert len(line) == cols\n            data.extend(line)\n        return Mtrx(rows, cols, data)\n             \n    @classmethod\n    def read_int_matrix(cls, fd, rows=None, cols=None):\n        return cls.readfromfile(fd, read_ints, rows, cols)\n             \n    @classmethod\n    def read_sym_matrix(cls, fd, rows=None, cols=None):\n        return cls.readfromfile(fd, read_syms, rows, cols)\n             \n    def __str__(self):\n        res = \"\"\n        for i in xrange(self.rows):\n            res += str(self.getrow(i)) + EOL\n        return res\n     \n    def __repr__(self):\n        return \"{}({}, {}, {})\".format(self.__class__.__name__, self.rows,\n                                        self.cols, self.data)\n \n# ------------------------------------------------------------------------------\n \ncachetotals = 0\ncachemisses = 0\n \ndef statreset():\n    global cachemisses, cachetotals\n    cachemisses = 0\n    cachetotals = 0\n \nclass memoizeit(object):\n    \"\"\"Decorator. Caches a function's return value each time it is called.\n     \n    If called later with the same arguments, the cached value is returned \n    (not reevaluated).\n    \"\"\"\n     \n    def __init__(self, func):\n        self.func = func\n        self.cache = {}\n         \n    def __call__(self, *args):\n         \n        # update stats\n        global cachetotals, cachemisses\n        cachetotals += 1\n         \n        try:\n            return self.cache[args]\n        except KeyError:\n             \n            # update stats\n            cachemisses += 1\n             \n            value = self.func(*args)\n            self.cache[args] = value\n            return value\n        except TypeError:\n \n            # update stats\n            cachemisses += 1\n \n            # uncachable -- for instance, passing a list as an argument.\n            # Better to not cache than to blow up entirely.\n            return self.func(*args)\n     \n    @property\n    def __name__(self):\n        return self.func.__name__\n     \n    def __get__(self, obj, objtype):\n        \"\"\"Support instance methods.\"\"\"\n        return functools.partial(self.__call__, obj)\n \n# ------------------------------------------------------------------------------\n \nclass timeit(object):\n    \"\"\"Decorator that times a function.\n     \n    When function ends, print name, runtime, return value and cache stats.\n    \"\"\"\n     \n    def __init__(self, func):\n        self.func = func\n         \n    def __call__(self, *args):\n        start = time.time()\n        value = self.func(*args)\n        delta = time.time() - start\n        cachedata = (1 - cachemisses/(cachetotals * 1.0)) if \\\n            cachetotals else 0\n        print (self.func.__name__, \"{:7.3f}s, (res: {}, cache: {:.2%})\".format(\n            delta, value, cachedata))\n        return value\n     \n    def __get__(self, obj, objtype):\n        return functools.partial(self.__call__, obj)\n \n#===============================================================================\n# Input/output\n#===============================================================================\n \ndef read_input(filename):\n    data = []\n    with open(filename, \"r\") as f:\n        cases = read_ints(f)[0]\n        # =============================================\n        for _ in xrange(cases):\n            case = {}\n            case[\"N\"] = read_ints(f)\n            case[\"Naomi\"] = sorted(read_floats(f))\n            case[\"Ken\"] = sorted(read_floats(f))\n            data.append(case)\n        # =============================================\n    return data\n \ndef make_output(fname, output):\n    CASE_PRFX = \"Case #%s: \"\n    fname = fname + time.strftime(\"%H%M%S\") + \".out\"\n    with open(fname, \"w\") as f:\n        restext = []\n        print (\"Output content ===============\")\n        # =============================================\n        for i, outdata in enumerate(output):\n            line = CASE_PRFX % (i + 1,) + str(outdata) + EOL\n            print (line),\n            restext.append(line)\n        # =============================================\n        print (\"=\" * 30)\n        f.writelines(restext)\n \n#===============================================================================\n# Actual solution\n#===============================================================================\n \n@timeit\ndef solveit(case):\n    ns = case[\"Naomi\"]\n    ks = case[\"Ken\"]\n     \n    # calculate deceptive war\n    nsmin = 0\n    ksmin = 0\n     \n    dwpoints = 0\n    while nsmin < len(ns):\n        if ns[nsmin] > ks[ksmin]:\n            ksmin += 1\n            dwpoints += 1 \n        nsmin += 1\n     \n    # calculate regular war\n    nsmax = len(ns) - 1\n    ksmin = 0\n     \n    wpoints = 0\n    while len(ks) >= ksmin + 1:\n        print (ns, ks, nsmax, ksmin)\n        if ns[nsmax] > ks[-1]:\n            ksmin += 1\n            wpoints += 1\n        else:\n            m = ksmin\n            for i in xrange(len(ks)-1, ksmin-1, -1):\n                if ks[i] < ns[nsmax]:\n                    m = i + 1\n                    break\n            del ks[m]\n        nsmax -= 1\n     \n    return str(dwpoints) + \" \" + str(wpoints) \n \n \n#===============================================================================\n# Main\n#===============================================================================\n \n@timeit\ndef main(fname):\n    data = read_input(fname)\n    output = []\n    for case in data:\n        statreset() # reset cache stats\n        # =============================================\n        res = solveit(case)\n        output.append(res)\n        # =============================================\n    make_output(fname, output)\n \n \nif __name__ == '__main__':\n#    main(\"sample.in\")\n    main(\"D-small-attempt0.in\")\n#    main(\"C-large.in\")\n#    main(\"B-small-attempt0.in\")\n#    main(\"A-large.in\")"}
{"author": "pek", "index": 61, "filename": "2014_2974486_5644738749267968.py", "code": "import sys\n \nf = open(sys.argv[1])\ncount = int(f.readline())\n \nfor i in xrange(0, count):\n    n = int(f.readline())\n    naomis = sorted(map(float, f.readline().split()))\n    kens = sorted(map(float, f.readline().split()))\n    assert len(naomis) == n and len(kens) == n\n \n    naomis_w = set(naomis)\n    kens_w = set(kens)\n    naomi_war_wins = 0\n    while naomis_w:\n        nao = max(naomis_w)\n        try:\n            ken = min(w for w in kens_w if w > nao)\n        except ValueError:\n            ken = min(kens_w)\n            naomi_war_wins += 1\n        naomis_w.remove(nao)\n        kens_w.remove(ken)\n \n    naomi_deceit_wins = 0\n    naomis_w = set(naomis)\n    kens_w = set(kens)\n    while naomis_w:\n        ken = min(kens_w)\n        try:\n            nao = min(w for w in naomis_w if w > ken)\n            naomi_deceit_wins += 1\n        except ValueError:\n            nao = min(naomis_w)\n        naomis_w.remove(nao)\n        kens_w.remove(ken)\n \n    print(\"Case #%s: %s %s\" % (i+1, naomi_deceit_wins, naomi_war_wins))\n"}
{"author": "radkokotev", "index": 62, "filename": "2014_2974486_5644738749267968.py", "code": "filename = raw_input(\"Name of file: \")\ninfile = open(filename, \"r\")\noutfile = open(filename + \".out\", \"w\")\n \n \nT = int(infile.readline()[:-1])\n## Code starts here\n \ndef playDecWars(her, his):\n    n = len(her)\n    count = 0\n    while n > 0:\n        if her[0] < his[0]:\n            del(her[0])\n            del(his[-1])\n        else:\n            del(her[0])\n            del(his[0])\n            count += 1\n        n -= 1\n    return count\n \ndef playWars(her, his):\n    n = len(her)\n    count = 0\n    while n > 0:\n        if her[0] > his[-1]:\n            count += 1\n            del(her[0])\n            del(his[0])\n        else:\n            his_index = 0\n            for num in his:\n                if num > her[0]:\n                    break\n                his_index += 1\n            del(her[0])\n            del(his[his_index])\n        n -= 1\n    return count\n \nfor t in range(1, T + 1):\n    n = int(infile.readline()[:-1])\n    her = infile.readline()[:-1].split(\" \")\n    his = infile.readline()[:-1].split(\" \")\n    her = [float(x) for x in her]\n    his = [float(x) for x in his]\n \n    her.sort()\n    his.sort()\n \n    d_wars = playDecWars(her[:], his[:])\n    wars = playWars(her[:], his[:])\n     \n    outfile.write(\"Case #%d: %d %d\\n\" % (t, d_wars, wars))\n     \n         \n     \n## code ends here\n \noutfile.close()\ninfile.close()\n"}
{"author": "intn", "index": 63, "filename": "2014_2974486_5644738749267968.py", "code": "#!/usr/bin/env python\nimport sys\n \n \ndef process(N, naomi, ken):\n\tpointer_n = pointer_k = 0\n\tscore0 = 0\n\tscore1 = N\n\tfor i in range(N):\n\t\tif naomi[i] > ken[pointer_k]:\n\t\t\tscore0 += 1\n\t\t\tpointer_k += 1\n\t\tif ken[i] > naomi[pointer_n]:\n\t\t\tscore1 -= 1\n\t\t\tpointer_n +=1\n\treturn str(score0) + ' ' + str(score1)\n \ninput_file = open(sys.argv[1], 'r')\nT = int(input_file.readline())\nfor i in range(T):\n\tN = int(input_file.readline())\n\tnaomi = sorted(map(float, input_file.readline().split()))\n\tken = sorted(map(float, input_file.readline().split()))\n\tprint('Case #%d:' % (i + 1), process(N, naomi, ken))\n"}
{"author": "addie9000", "index": 64, "filename": "2014_2974486_5644738749267968.py", "code": "# !/usr/bin/python\nimport sys, string\n \n#solve case function\ndef solve_case(naomi_blocks, ken_blocks, case_number):\n    naomi_blocks_for_deceitful = naomi_blocks[:]\n    ken_blocks_for_deceitful = ken_blocks[:]\n    deceitful_war_point = 0\n    while len(naomi_blocks_for_deceitful) > 0:\n        naomi_call = naomi_blocks_for_deceitful.pop(0)\n        min_ken_call = ken_blocks_for_deceitful[0]\n        if naomi_call < min_ken_call:\n            naomi_call = ken_blocks_for_deceitful[-1] - 0.000001\n        else:\n            # Naomi may call the same kg many times but Ken should not realize it ;)\n            # The important point is that she must call heavier than Ken's max.\n            naomi_call = ken_blocks_for_deceitful[-1] + 0.000001\n \n        ken_candidate = filter(lambda x: x > naomi_call, ken_blocks_for_deceitful)\n        if len(ken_candidate) > 0:\n            ken_call = ken_blocks_for_deceitful.pop(ken_blocks_for_deceitful.index(ken_candidate.pop(0)))\n        else:\n            ken_call = ken_blocks_for_deceitful.pop(0)\n \n        if naomi_call > ken_call:\n            deceitful_war_point += 1\n \n    war_point = 0\n    while len(naomi_blocks) > 0:\n        naomi_call = naomi_blocks.pop(0)\n        ken_candidate = filter(lambda x: x > naomi_call, ken_blocks)\n        if len(ken_candidate) > 0:\n            ken_call = ken_blocks.pop(ken_blocks.index(ken_candidate.pop(0)))\n        else:\n            ken_call = ken_blocks.pop(0)\n \n        if naomi_call > ken_call:\n            war_point += 1\n \n    print(\"Case #%d: %d %d\" % (case_number, deceitful_war_point, war_point))\n \n#main\nr_file = sys.stdin\n \nif len(sys.argv) > 1:\n    r_file = open(sys.argv[1], 'r')\n \ntotal_cases = r_file.readline()\nfor case_number in range(1, int(total_cases) + 1):\n    r_file.readline()\n    n_values = map(float, r_file.readline().split(' '))\n    k_values = map(float, r_file.readline().split(' '))\n    solve_case(sorted(n_values), sorted(k_values), case_number)\n \n"}
